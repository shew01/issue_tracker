<File version="2">
  <FileID>a32f21ab-9ddc-495f-93c2-865ec3aa7fba</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAACeFSURBVHhe7d1ndFRpnt/xOcf7etc+Tuvxen38
3vYL+8Ue+xzbu7M7u71eT+zpmZ6hp3fISeQooEFIAiSByIgkcpAIEiCCCAIJSYAklHMulaqUc0QC
pJ+f54K6WVr09EAT7/dzzvcgqm5VXZW4df+3gvgeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4eZ//btKWsIhNyWuDw5KDiIiI6L0udH1Y8pKlK5Kf
7uZfbE3whiwZA4+lvkdERET0Pjdq9umZuZV6upt/MTst9Judf2uP1NJNRERE73N2CEi5U/DtBgC7
sL1QcxcRERG9z/U+lJLT8xkAiIiI3kR2P9o5IHX0vTh7vn3Gvd3+vf/r53+ZOc8uY5f9Ntf57D78
lQeAtt4nN2z/bDMr8mwMC0RERF9l95d1TUO6klKsa2ll43bddOlmkap8/bqbV6/LyS9e1p6XWeBX
hbfPXKbQuex4y11LLVViSqnqWx4662DX5aUHAPtnY8cjlVTUq7SyXiXlXhUVZKsgJ1V5OekqKMyX
r3VILU9viOht1tRppt8HJjMF269bzZ+95u/N5uvxlncy/8Z7h8yy4wyydgMa7/QvM+f1mY3rG5d5
LrteHYNSl5nS7dfjLfOy2QF9vNPtdtxmvhd7e13me+0wy/1Bt20u32O+z8GRJ7Xb6xpvuVfI/twG
R59k75vxfmbOfWfO63kN9x3Rd5k9Wi+sbNdlMwDUtw6o2v/17Ok371Ypw+zYE2+XqszTLW/zsDn9
0Ve1PFJtw6BKqjvNzr3MDAo+pWTWmPMGnfNrGx+oxv/ka0/jkLwtA7p4q0iltd1fPh680gDgbexT
sRkA2swGWlRSquLzP1JDxjzVJX2iW0d+rmrfgFpf8MBD9CZr75fSbibpTmmvusy/1+rScp25Wao2
s8OwO0C7UbY/82+13Zze2dqps1fvqqbt6fn2mS2zrP2339D+SE3mT7uDt0OuPW9sqnaG3qY2nTyf
qIqWJ0+9jV3/l8s+3Y6cZ8+enm+fyrt/N1VJuQ3qtMuY5b9c1t7W07/bdXC+Npdpebq+doO259l1
sz17WZuv7bFzW/Y8e7pzWbts56j8HaPq7h/RxTMXdLu058unFMeub2w97WnPDhIt5uve/kc6d+Kw
QjZsUdj2eFWZ5brMcmP3hXObdvmntzt2+bHz7f0xdl+M3Q9j35Ot2zxA5abeVFDwFq0O3q2Ukl5n
KLPrZZe3l7XX0TMs5WVn61Jmvbrs9/3M/WFv297us+tO9Lay/8aLqjqUklWrbvNYZLeF57OnZxY2
ONlBoKlzxDmgrvJ2q9zTqQpTjb/PWdZndvC37j0ZFvLKWs2B+bBKq9vUY7YTO5RX1nWpqr7H2W5u
ZVR/dwNAfcugcnMKVJpfooz0ZNWlTDOPYofMLU5U0qF/UJXvgbMhPvvNE72Nes2/3d3BAYq+Vi+z
HSj36ilNCYlVm9kA2roeq6i0XlXNo86Ot8schVd5/Cq+f08zVm1QodmJNzR2KrfYL5/5dz/Y26uw
oFBtu1CsLrPjaTN7Guc8czv2CLrV7nhqivTptEm657XXOaKKygZVND5We+eQ8sta1GIeBJq7RpwN
uLzSrxLvkMxVKTYqUBtO3pVZLfkbOpRb2qRmZ0c3qkYzaReU+GXmbnnrWlVcO+Ds5DrN+nrrW5Vr
Nn470LR02WUHVVjWLLOJyldwV7OWbVJqdZ/aux6psLhexd4Hsp/qST13TLNDjqjWHD4XFdWqrOGh
es2KVJp1yi1tc66v1axns7mPSssb5bHD0NNtuufBsPaFB2rhhuPKKy3RgbBATVyyW3V9o2puf+zs
eBvangxKXea0/BKfKpseO/ex3zxo2WcKGs0g5W83A4h5wKuqblB+VbfzLIgdAjrMD6rwTpx+/as5
On+vRLfOn9XkWct01zyudPU9Nsu3qabZLNc9pLJan07s36zAQ6kyj3ny+9vN+pvv39yWXX9fU79K
K7vUaNbl2QGD6E03NgAkm6N1+5q83Rk7A/fT7GOCPd3u0McGALutTpk+V//m3/47/fs/+w/6/vf/
zPz55yqubHa2o7EBoKiqU5Xmseu//Nf/poD5yxS1/4S5zJ/qyvW7GjKPgTfNct/ZAOA3K5m+ZqHu
/+RvdG7uJBVc/IEeZfxnDVz9ns5t+e+q9j9iAKB3Ivs09YGIZTp60y+zr1F+0nkt3pWsvPR4TZw2
XWvWrtPnc0OV1zysu5dOata8QC1bMFc/nBUqb/tDnT28X2EbI7R4Y6zKSgv1q48+0s8X71NFXbOi
d+1QxMZNWhNpjoDNjto+Fd1SW6opixYp32xsoUsnacHyEE2aMlmBG/Zq7qzpCjmRo4aqPM2Y/rm+
WLdJn01dohsVnUo8Fq5tCYVqr69VWHikwkNCtDW2QMW5NzV12lStWLpcn89conUbtmrChDm6UNKt
xvIShW7YpPWrQrTvcqVSLx82yy7S/NkBWnvwttIT9ugv/s//U1h8jgrv3lZIRJRmLw7WxWy/joRO
11989FudSy9R9J4tymqUsi6c0oy5K7R0wWKFx2bLV5mtgMnTtHTJCk1ZslXl5v60T8X7K7I1e9JK
FZltfMDcv8NDgwpZtlCRu05oz97b6h95rB1Be5RW06PE2OP6ImKHVnyxX7eLSrR17QFVmx38tQNH
dSChSmW5GVqzLkKrlqzT4Rs1zssRg48eatOiudp8oUbm8c8pdusarduTpIORizU1YJuu3ynX9rDl
ClyzTj//1S/1xZlidfpqtMHed2tDtCOuUFkppzX1s6mK3HdLPrPerc/92yB6kz0/ADSYYfnZGjtG
vjYADIxKP/jh32v2vKXq6elWRl61/uW/+te6X1DrDNpjA8D9okbn4CGnqFJ/8s//hd2xK+ZsonOa
fVz6TgeABjOpX180U3k/+B86+Y+/0aVTs3Vh90c6t/Mjnd4/R55GngGgdyM7AOwPW6xjtxqcAaAo
+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
aH850Rv/RUBjlZZVqLCwREXFpURERB9E+QXF5mi/xfk1uzZ7VH7lyhVdvXr1ncn+YiL72wDf+K8C
Hqu/v/9pfURERB9EAwP96n3mqNruZMf+8513pbf6nwHZpxzs70kmIiKit9fz++exXtsAYN+4YN8R
ad+IMN7vKSYiIqLXW2tr65t9D8DIyIiOHj2qn/70p5o2bZomT55MREREb7gJEyaos7Nz3PcCvJYB
wNq6datWrlypxMRExcfHExER0Rvu888/V2Nj45sdAHbu3OkMABcvXnQ+i0hERERvtkmTJjmfUmAA
ICIiclEMAERERC6MAYCIiMiFMQAQERG5MAYAIiIiF8YAQERE5MIYAIiIiFwYAwAREZELYwAgIiJy
YQwARERELowBgIiIyIUxABAREbkwBgAiIiIXxgBARETkwhgAiIiIXBgDABERkQtjACAiInJhDABE
REQujAGAiIjIhTEAEBERuTAGACIiIhfGAEBEROTCGACIiIhcGAMAERGRC2MAICIicmEMAERERC6M
AYCIiMiFMQAQERG5MAYAIiIiF8YAQERE5MIYAIiIiFwYAwAREZELYwAgIiJyYQwARERELowBgIiI
yIUxABAREbkwBgAiIiIXxgBARETkwhgAiIiIXBgDABERkQtjACAiInJhDABEREQujAGAiIjIhTEA
EBERuTAGACIiIhfGAEBEROTCGACIiIhcGAMAERGRC2MAICIicmEMAERERC6MAYCIiMiFMQAQERG5
MAYAIiIiF8YAQERE5MIYAIiIiFwYAwAREZELYwAgIiJyYQwARERELowBgIiIyIUxABAREbkwBgAi
IiIXxgBARETkwhgAiIiIXBgDABERkQtjACAiInJhDABEREQujAGAiIjIhTEAEBERuTAGACIiIhfG
AEBEROTCGACIiIhcGAMAERGRC2MAICIicmEMAERERC6MAYCIiMiFMQAQERG5MAYAIiIiF8YAQERE
5MIYAIiIiFwYAwAREZELYwAgIiJyYQwARERELowBgIiIyIUxABAREbkwBgAiIiIXxgBARETkwhgA
iIiIXBgDABERkQtjACAiInJhDABEREQujAGAiIjIhTEAEBERuTAGACIiIhfGAEBEROTCGACIiIhc
GAMAERGRC2MAICIicmEMAERERC6MAYCIiMiFMQAQERG5MAYAIiIiF8YAQERE5MIYAIiIiFwYAwAR
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
D0Tc6opAIgwiAAAAAElFTkSuQmCC</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="formMain" children="Controls">
    <Property name="CancelButton">
      <Reference name="buttonExit" />
    </Property>
    <Property name="ClientSize">954, 362</Property>
    <Property name="Name">formMain</Property>
    <Property name="Text">Update Implementation Queue Order</Property>
    <Event name="Load">formMain_Load</Event>
    <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textboxNumberOfRows_QTY" children="Controls">
      <Property name="Anchor">Bottom, Left</Property>
      <Property name="Location">119, 332</Property>
      <Property name="Name">textboxNumberOfRows_QTY</Property>
      <Property name="ReadOnly">True</Property>
      <Property name="Size">100, 20</Property>
      <Property name="TabIndex">9</Property>
    </Object>
    <Object type="System.Windows.Forms.Label, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="labelNumberOfRows" children="Controls">
      <Property name="Anchor">Bottom, Left</Property>
      <Property name="Location">12, 332</Property>
      <Property name="Name">labelNumberOfRows</Property>
      <Property name="Size">100, 23</Property>
      <Property name="TabIndex">8</Property>
      <Property name="Text">Number of Rows</Property>
    </Object>
    <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textboxSearch" children="Controls">
      <Property name="Anchor">Top, Left, Right</Property>
      <Property name="Location">13, 15</Property>
      <Property name="Name">textboxSearch</Property>
      <Property name="Size">847, 20</Property>
      <Property name="TabIndex">0</Property>
      <Event name="KeyDown">textboxSearch_KeyDown</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonSearch" children="Controls">
      <Property name="Anchor">Top, Right</Property>
      <Property name="Location">866, 13</Property>
      <Property name="Name">buttonSearch</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">&amp;Search</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonSearch_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridviewResults" children="Controls">
      <Property name="AllowUserToAddRows">False</Property>
      <Property name="AllowUserToDeleteRows">False</Property>
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="Location">12, 42</Property>
      <Property name="Name">datagridviewResults</Property>
      <Property name="Size">930, 279</Property>
      <Property name="TabIndex">2</Property>
      <Event name="ColumnHeaderMouseClick">datagridviewResults_ColumnHeaderMouseClick</Event>
      <Event name="CurrentCellDirtyStateChanged">datagridviewResults_CurrentCellDirtyStateChanged</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonExit" children="Controls">
      <Property name="Anchor">Bottom, Right</Property>
      <Property name="DialogResult">Cancel</Property>
      <Property name="Location">867, 327</Property>
      <Property name="Name">buttonExit</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">4</Property>
      <Property name="Text">E&amp;xit</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonExit_Click</Event>
    </Object>
  </Object>
  <Code><![CDATA[

#region Control Helper Functions
function Load-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The ComboBox control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the ComboBox's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	#>
	Param (
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		[System.Windows.Forms.DataGridView]$DataGridView,
		[ValidateNotNull()]
		[Parameter(Mandatory=$true)]
		$Item,
	    [Parameter(Mandatory=$false)]
		[string]$DataMember
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.ComponentModel.IListSource]`
	-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{	
			$array.Add($Item)	
		}
		$DataGridView.DataSource = $array
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param(
	[ValidateNotNull()]
	$InputObject, 
	[ValidateNotNull()]
	[System.Data.DataTable]$Table,
	[switch]$RetainColumns,
	[switch]$FilterWMIProperties)
	
	if($Table -eq $null)
	{
		$Table = New-Object System.Data.DataTable
	}

	if($InputObject-is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	else
	{
		if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()

			if($InputObject -eq $null){ return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach($item in $InputObject)
			{
				if($item -ne $null)
				{
					$object = $item
					break	
				}
			}

			if($object -eq $null) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if($prop.Value -ne $null)
					{
						try{ $type = $prop.Value.GetType() } catch {}
					}

					if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
		      			[void]$table.Columns.Add($prop.Name, $type) 
					}
					else #Type info not found
					{ 
						[void]$table.Columns.Add($prop.Name) 	
					}
				}
		    }
			
			if($object -is [System.Data.DataRow])
			{
				foreach($item in $InputObject)
				{	
					$Table.Rows.Add($item)
				}
				return  @(,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()	
		}
		
		foreach($item in $InputObject)
		{		
			$row = $table.NewRow()
			
			if($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}

	return @(,$Table)	
}
#endregion

#region Search Function
function SearchGrid()
{
	$RowIndex = 0
	$ColumnIndex = 0
	$seachString = $textboxSearch.Text
	
	if($seachString -eq "")
	{
		return
	}
	
	if($datagridviewResults.SelectedCells.Count -ne 0)
	{
		$startCell = $datagridviewResults.SelectedCells[0];
		$RowIndex = $startCell.RowIndex
		$ColumnIndex = $startCell.ColumnIndex + 1
	}
	
	$columnCount = $datagridviewResults.ColumnCount
	$rowCount = $datagridviewResults.RowCount
	for(;$RowIndex -lt $rowCount; $RowIndex++)
	{
		$Row = $datagridviewResults.Rows[$RowIndex]
		
		for(;$ColumnIndex -lt $columnCount; $ColumnIndex++)
		{
			$cell = $Row.Cells[$ColumnIndex]
			
			if($cell.Value -ne $null -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
			{
				$datagridviewResults.CurrentCell = $cell
				return
			}
		}
		
		$ColumnIndex = 0
	}
	
	$datagridviewResults.CurrentCell = $null
	[void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.","String not Found")
	
}
#endregion

$formMain_Load={
	#TODO: Initialize Form Controls here
	
	<###############################################################
	#
	# Display non-Production environment notification
	#
	###############################################################>

	display_nonproduction_environment

	if ($Debug_SW -eq 1)
	{
		Write-Host "`$User_SW          = $User_SW"
	}

	[string]$SQLCommand_STR = "
select
	assignee_cde,
	issue_id,
	status_cde,
	queue_order_nbr,
	status_dte,
	location_cde,
	customer_cde,
	short_dsc,
	substring(long_dsc, 1, 150) as long_dsc,
	create_dte,
	due_dte,
	internal_ticket_nbr,
	vendor_ticket_nbr,
	comment_dsc
from
	issue
where
	('ALL' = '$User_SW' or assignee_cde = (select assignee_cde from assignee where user_nme = '$CurrentUser_NME'))
	and status_cde = 'Implementation'
order by
	assignee_cde,
	case
		when queue_order_nbr is null then 99
		else                              queue_order_nbr
	end,
	status_cde desc,
	due_dte
	;" # End of $SQLCommand_STR
	
	if ($Debug_SW -eq 1)
	{
		Write-Host $SQLCommand_STR
	}
	
	$Instance = "$DatabaseConnection_STR"
	$Database = "$Database_NME"
	$connStr  = "Server=$Instance;Database=$Database;Integrated Security=True"
	
	# Ideas for adding DataGridViewComboBoxColumn to DataGridView:
	#     http://www.devx.com/dotnet/Article/33748/0/page/2
	#     http://www.devx.com/dotnet/Article/33748/0/page/3
	
	$conn            = New-Object System.Data.SqlClient.SQLConnection($connStr)
	$cmd             = $conn.CreateCommand()
	$cmd.CommandText = $SQLCommand_STR
	$script:adapter  = New-Object System.Data.SqlClient.SqlDataAdapter($cmd)
	$dt              = New-Object System.Data.DataTable
	$script:adapter.Fill($dt)
	$datagridviewResults.DataSource = $dt
	$cmdBldr         = New-Object System.Data.SqlClient.SqlCommandBuilder($adapter)
	
#	# Retrieve data from database
#	
#	$dt = Get-Datatable $DatabaseConnection_STR $Database_NME $SQLCommand_STR
#	
#	# Put data into datagridview
#	
#	$datagridviewResults.DataSource = $dt.Tables[0]
#	
	# Set datagridview column attributes
	
	$datagridviewResults.Columns[0].HeaderText = "Assignee";
	$datagridviewResults.Columns[0].Width = 80;
	
	$datagridviewResults.Columns[1].HeaderText = "ID";
	$datagridviewResults.Columns[1].Width = 40;
	
	$datagridviewResults.Columns[2].HeaderText = "Status Code";
	$datagridviewResults.Columns[2].Width = 80;
	
	$datagridviewResults.Columns[3].HeaderText = "Order";
	$datagridviewResults.Columns[3].Width = 35;
	
	$datagridviewResults.Columns[4].HeaderText = "Status Date";
	$datagridviewResults.Columns[4].Width = 110;
	
	$datagridviewResults.Columns[5].HeaderText = "Location";
	$datagridviewResults.Columns[5].Width = 60;
	
	$datagridviewResults.Columns[6].HeaderText = "Customer";
	$datagridviewResults.Columns[6].Width = 90;
	
	$datagridviewResults.Columns[7].HeaderText = "Short Description";
	$datagridviewResults.Columns[7].Width = 120;
	
	$datagridviewResults.Columns[8].HeaderText = "Long Description";
	$datagridviewResults.Columns[8].Width = 120;
	
	$datagridviewResults.Columns[9].HeaderText = "Create Date";
	$datagridviewResults.Columns[9].Width = 110;
	
	$datagridviewResults.Columns[10].HeaderText = "Due Date";
	$datagridviewResults.Columns[10].Width = 110;
	
	$datagridviewResults.Columns[11].HeaderText = "Int. Ticket";
	$datagridviewResults.Columns[11].Width = 75;
	
	$datagridviewResults.Columns[12].HeaderText = "Vendor Ticket";
	$datagridviewResults.Columns[12].Width = 80;
	
	$datagridviewResults.Columns[13].HeaderText = "Comment";
	$datagridviewResults.Columns[13].Width = 120;
	
	# Display the row count
	
	$DataGridRowCount_QTY = $datagridviewResults.RowCount
	
	$textboxNumberOfRows_QTY.Text = "{0:N0}" -f $DataGridRowCount_QTY
}

$buttonSearch_Click={
	#TODO: Place custom script here
	SearchGrid
}

$buttonExit_Click={
	#TODO: Place custom script here

	if ($script:DGVhasChanged -and [System.Windows.Forms.MessageBox]::Show('Do you wish to save?', 'Data Changed', 'YesNo'))
	{
		try
		{
			$script:adapter.Update($datagridviewResults.DataSource)
		}
		catch
		{
			$ErrorMessage_STR = $error[0].ToString();
#			$ErrorPosition_STR = $error[0].InvocationInfo.PositionMessage.ToString();
			
			[System.Windows.Forms.MessageBox]::Show("$ErrorMessage_STR", "Database Write Was Unsuccessful", "OK")
			
			return
		}
	}
	
	$formMain.Close()
}

$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	if($datagridviewResults.DataSource -is [System.Data.DataTable])
	{
		$column = $datagridviewResults.Columns[$_.ColumnIndex]
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		
		if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$direction = [System.ComponentModel.ListSortDirection]::Descending
		}

		$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
	}
}

$textboxSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	if($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
	{
		SearchGrid	
		$_.SuppressKeyPress = $true
	}
}

$datagridviewResults_CurrentCellDirtyStateChanged={
	#TODO: Place custom script here
	$script:DGVhasChanged = $true
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies>
    <Assembly>mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</Assembly>
    <Assembly>System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
    <Assembly>System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</Assembly>
  </Assemblies>
</File>