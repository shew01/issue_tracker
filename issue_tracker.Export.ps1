#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: fbb20784-d078-4c7f-a17a-2a036477e5c9
# Source File: issue_tracker.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
JwQAAB+LCAAAAAAABACllF1vgjAYhe9N/A+EewScG1tSSTY/Fi/2ETW7XV7hRbuVlrRlmf9+RZDg
zBxzN4RTnp7zHkghc4zEB8rtGDSE3Y5lkWcp3jDSO2HkC0pFBQ/9nk/cvaieTSnD2ThMVqu+F1wP
nNhcnUEUJA74ATh98C6uBkGAl9ENcSu42lqlLLcZhh5xm3JvLlhs4iy3maYqUUlrjglK5BE+QopD
27bucsrioe3Z4UKD1HnWy5Qqw09vHQFjzgNQPhUyfc1U0vTarxuzpLXZPRMrYMbKb1hZI5GmwOPJ
p0ZevMuhvZQ52mFJK5Pgt04YbYxrMdcCQUYbc3erFF1zxO8Ffib/VKm2mcRU/5rVhM6LqaedKZW3
KLXDzm90OqUm/tslzRimyDVo8/1blDrgj8JLUR6M+iCV6knSNeXACqAYKaS7glpC9I7SOGWGJu4R
1u0Q9+DH8AX6y/SSJwQAAA==#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.122
     Generated on:       8/15/2016 7:41 AM
     Generated by:       SQL Server Team
     Organization:       ALTESS
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>

param
(
	[Parameter(Mandatory = $false, ValueFromPipeline = $true, HelpMessage = "Enter a value for the user switch (ALL, CURRENT, domain\username); defaults to CURRENT")]
	[ValidateLength(3, 30)]
	[string]$User_SW = "CURRENT",
	
	[Parameter(Mandatory = $false, ValueFromPipeline = $true, HelpMessage = "Enter a value for the debug switch (0 or 1)")]
	[ValidateRange(0, 1)]
	[int]$Debug_SW = 0
)
#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
YgMAAB+LCAAAAAAABAC9k01LA0EMhu9C/8PQ87If3a5rYXZBWnopqFhRr9lttgzOR0lmLPvvbatU
0YMgsuSSNyF5CEnkPbbuFalfgAdxcFg5W40n43p0IYS8JbVVFvRSabwBg/XaA/mwi3fMMvmRPdVc
M6NptEI+6c9IXxtuHWnVROLxgzSN06NFYh60D4SVxeAJdCTuwqFHu8L+wb2grZqyhKItLrNZPsX0
aiaTc9fvlHXPHs0QjPhJ2Y3bc7x0ZHgQ4nFPw4AI9spu/8JK867oyi7LNkUKOfzOejZ6kJnmjvD/
QWf5fvIy+fpT9RvJGdnIYgMAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

 # End of param

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Call-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}






#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
mjEAAB+LCAAAAAAABADdW11v4jgUfV9p/oOVZ1RIAoVKFKml7aradqYLzMdb5YQLzdbEyHGmML9+
nQQogSTY5GPKqFLVFNv32Ofk+PrW7Q7Apj+BLW8wx0j84DnUvdQMrffpL4S6X5gzdVxM7hwCn/EM
eo/Yce8om53NvUm3vvdx1Mn6D2yO+HIOl9pw6XGYnX133DF9886CvtH3Gkr6qIa+rTA0zxrBVw31
fcJ9Bpcu+JxhUkNPvkUc+x9YjugruJdWu41bdutcvzCb0OhcaMgVUC61NVQN2S8OGTPRVOtTlzNK
vGh6AusTo3NgfLnq08euDeTa55y66zai1QAmIPrbsGpmhQ1uFw7XUH09VH09VtrYxAGXD51foPWa
bbOGmqZ5sFOwqtpm1Q82H3LM+BP1HO4EE+iLgMCGNgNwD/YdwYJrvXvP8wGNGLZfgaFHcP39jrc/
xbirXg8Uj98BPgeP3XrYYN36sBz+ZtSfX9NF6ZKYBoEsumhmaWJ/ZR6ojaMF1QVtevN8b0nSiNsE
lOixUkbzvIY6bYn2I2zdu2NYaD3J1kNO51rvDhMPZDqEcrgiBIWS8JK6HKY2GKUKZrmII9Z5CJjZ
L98FtX3Mxs/D0SCb6Uyum60aarUS5p3GdioIqTEi/vWGWAWjIdXjXQF6UgfhzyE/H56vUGDP9zc5
udIvjuVqDaB0njoF0fSALSClk0SCKHE1h65wNE1txRcqBYAKTYYhaNrfZ7NpSjL4NIeM4KEAHwoA
ohSEx9AcJSKl8xylM9FErpfFUG0EGY4S2ekoVPhudY7gW9fVCbeWhznfH+KrB98cz8dkyJcErkWW
1aeEMq03Yn7SrryTbYkc0n7NWqrnsEU8AzsRiwlNOM8m0FbcAvZjl24sSXngAZ1FCXkitpOxlDys
hkaixOtu7NLtQw7crntIAivDMe5vpHxi9/EDnuTMPCc5s5Hk+9knuSRtZJ3kkrSRsRHJHBSPPMoN
YE4Zd9zpcSe5So2j7zPBKI9OntXtCAnBS98SdLkcKeJwBS39SF6uf8RW5k+xECNXMUjGD+IOYqg5
iG6oFYNkLO1IB3lc5qoFVesgDDCHz/AWIla1kCvXfgnfETqvoYEzfZHL7neylo5cuhfznhjs8g8+
SdpKNZ8QGxLgkDy6Qu0ntjjFHXUqFebX+VhM4n42JzATwCO95NnhEovF2SpLwqCgNcNolVxUiQCi
OEL0rw/iKPSFjYFVrr2kJStOgX06s2gVm54dBNrUPYdiHr7YyG9uVRUY4MI8yCZvXWwRGGctaoEl
9jT8SmmaLtQrWfHJPLmfHNNhbvWb6ZasmafTvZlE6ZwnZmofu5SmV1ycl1vSXOcj9eJKpJNTLphF
M/h91ffUFSw2/VQ5+r4XzhTAlVE8W286J1to37LRXG6h5OTJ8T+ue6A0fCfmITlpDo1EiehUEKW7
iWT7RDdJpbtKT1llNn9GWe1AJpJdVjNMmbp5vK4mU/jaqqu1ZG5xbRmJTNnuyLraKEipUXCHjoMb
3EA8gfpapFwx9pXnOVMXlEts74Sf5/j73haA8veSIwxmQhlSAli8u2wtUUneUqnwolu3KtZy42BC
pwPwRFytF13xlXg33wVqdpo1ZF4kXt7KUGiAVNqT2mkltQw9SjlYqEZJKKriS5deEDBJbTFxxR+E
SGEmhADeuu3qN8vezLMpI45VgJi69c2ou1Ei+VYRo/BX5HDE4H5/NYEYfnPc6TGxGuakNWlPdH3c
amATH471Y0YqmVOfMig+0OYxkny3vv2/GL3/AUMXeY6aMQAA#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$textboxSearchWildCard_STR = New-Object 'System.Windows.Forms.TextBox'
	$textboxSearchIssue_ID = New-Object 'System.Windows.Forms.TextBox'
	$labelSearchWildCardText = New-Object 'System.Windows.Forms.Label'
	$buttonSearchByWildCardText = New-Object 'System.Windows.Forms.Button'
	$labelSearchIssueID = New-Object 'System.Windows.Forms.Label'
	$buttonSearchByID = New-Object 'System.Windows.Forms.Button'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonCurrentIssues = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonCreateNewIssue = New-Object 'System.Windows.Forms.Button'
	$buttonUpdateImplementation = New-Object 'System.Windows.Forms.Button'
	$comboboxSearchStatus_CDE = New-Object 'System.Windows.Forms.ComboBox'
	$comboboxSearchStatusGroup_CDE = New-Object 'System.Windows.Forms.ComboBox'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$buttonSearchByStatus = New-Object 'System.Windows.Forms.Button'
	$labelSearchStatusGroup = New-Object 'System.Windows.Forms.Label'
	$buttonSearchByStatusGroup = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$buttonSearchForAssignee = New-Object 'System.Windows.Forms.Button'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	#region Control Helper Functions
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	#endregion
	
	$MainForm_Load={
		#TODO: Initialize Form Controls here
	
		<###############################################################
		#
		# Display non-Production environment notification
		#
		###############################################################>
	
		display_nonproduction_environment
	
		<###############################################################
		#
		# Populate status_group_cde search values
		#
		###############################################################>
	
		# Create an array containing valid status group code search values
		
		[array]$SearchStatusGroupCode_ARY = @("All")
	
		$SearchStatusGroupCode_ARY = $SearchStatusGroupCode_ARY + $StatusGroupCode_ARY.status_group_cde
	
		# Populate Search Group Code combobox
	
		Load-ComboBox $comboboxSearchStatusGroup_CDE $SearchStatusGroupCode_ARY
		
		$comboboxSearchStatusGroup_CDE.SelectedIndex = $comboboxSearchStatusGroup_CDE.FindStringExact('All')
		
		<###############################################################
		#
		# Populate status_cde search values
		#
		###############################################################>
		
		# Create an array containing valid status code search values
		
		[array]$SearchStatusCode_ARY = @("All")
		
		$SearchStatusCode_ARY = $SearchStatusCode_ARY + $StatusCode_ARY.status_cde
		
		# Populate Search Code combobox
		
		Load-ComboBox $comboboxSearchStatus_CDE $SearchStatusCode_ARY
		
		$comboboxSearchStatus_CDE.SelectedIndex = $comboboxSearchStatus_CDE.FindStringExact('All')
	}
	
	$buttonSearchByStatusGroup_Click={
		#TODO: Place custom script here
		
		$MainForm.Hide()
	
		if ($comboboxSearchStatusGroup_CDE.Text -ne '')
		{
			Call-ChildFormSearchForIssue_psf -SearchStatusGroup_CDE $comboboxSearchStatusGroup_CDE.Text
		} else {
			Call-ChildFormSearchForIssue_psf -SearchStatusGroup_CDE ALL
		}
		
		$MainForm.Show()
	}
	
	$buttonSearchByStatus_Click={
		#TODO: Place custom script here
		
		$MainForm.Hide()
		
		if ($comboboxSearchStatus_CDE.Text -ne '')
		{
			Call-ChildFormSearchForIssue_psf -SearchStatus_CDE $comboboxSearchStatus_CDE.Text
		} else {
			Call-ChildFormSearchForIssue_psf -SearchStatus_CDE ALL
		}
		
		$MainForm.Show()
	}
	
	$buttonUpdateImplementation_Click={
		#TODO: Place custom script here
		
		$MainForm.Hide()
		Call-ChildFormSearchForImplementation_psf
		$MainForm.Show()
	}
	
	$buttonSearchByID_Click={
		#TODO: Place custom script here
		
		if ($textboxSearchIssue_ID.Text -ne '')
		{
			$MainForm.Hide()
			
	#		Call-ChildFormSearchForIssue_psf -SearchIssue_ID_STR $textboxSearchIssue_ID.Text.trim()
			Call-ChildFormEditIssue_psf $textboxSearchIssue_ID.Text.trim() # This is issue_id
			
			$MainForm.Show()
		}
	}
	
	$buttonSearchByWildCardText_Click={
		#TODO: Place custom script here
		
		if ($textboxSearchWildCard_STR.Text -ne '')
		{
			$MainForm.Hide()
			
			Call-ChildFormSearchForIssue_psf -SearchWildCardText_STR $textboxSearchWildCard_STR.Text.trim()
			
			$MainForm.Show()
		}
	}
	
	$buttonSearchForAssignee_Click={
		#TODO: Place custom script here
		
		$MainForm.Hide()
		Call-ChildFormSearchForAssignee_psf
		$MainForm.Show()
	}
	
	$buttonExit_Click={
		#TODO: Place custom script here
		
		$MainForm.Close()
	}
	
	$buttonCurrentIssues_Click={
		#TODO: Place custom script here
	
		$MainForm.Hide()
	
		# Define SQL statement
	
		[string]$SQLCommand_STR = "
select
	assignee_cde        as Assignee,
	issue_id            as ID,
	status_cde          as 'Status Code',
	queue_order_nbr     as 'Queue Order',
	convert(varchar(10), status_dte, 101) + ' ' + convert(varchar(8), status_dte, 108) as 'Status Date',
--	est_duration_min,
	location_cde        as Location,
--	priority_cde,
	customer_cde        as Customer,
--	work_type_cde,
	short_dsc           as 'Short Description',
--	long_dsc,
	convert(varchar(10), create_dte, 101) + ' ' + convert(varchar(8), create_dte, 108) as 'Create Date',
	convert(varchar(10), due_dte, 101) + ' ' + convert(varchar(8), due_dte, 108) as 'Due Date',
--	category_cde,
	internal_ticket_nbr as Ticket,
--	vendor_ticket_nbr,
	comment_dsc         as Comment
from
	issue
where
	status_cde in
		(
		'Implementation',
		'Assigned',
		'Pending',
		'Watching',
		'Unassigned'
		)
order by
	assignee_cde,
	case status_cde
		when 'Implementation' then  10
		when 'Assigned'       then  20
		when 'Pending'        then  30
		when 'Watching'       then  40
		when 'Unassigned'     then  99
		else                       999
	end,
	case
		when queue_order_nbr is null then 999
		else                             queue_order_nbr
	end
	,
	due_dte,
	status_dte
	;"
		
		if ($Debug_SW -eq 1)
		{
			Write-Host $SQLCommand_STR
		}
	
		# Create an object for the data returned from SQL Server
	
		$ResultsDataTable_OBJ = New-Object System.Data.DataTable
	
		# Execute the SQL query
	
		$ResultsDataTable_OBJ = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR $SQLCommand_STR
	
	#	<###############################################################
	#	#
	#	# Open the SQL Server result set in Excel, if it is installed
	#	#
	#	###############################################################>
	#
	#	$ExcelFileSpecification_NME = "C:\Program Files (x86)\Microsoft Office\Office15\EXCEL.EXE"
	#	
	#	if (test-path -path $ExcelFileSpecification_NME)
	#	{
	#		<###############################################################
	#		#
	#		# Excel is installed; so, create a .csv file with the output
	#		# retreived from SQL server; see also
	#		# http://powershell.com/cs/forums/p/13599/25103.aspx
	#		#
	#		###############################################################>
	#
	#		$CsvFile_NME = "$DBA_LOGS\issue_tracker.csv"
	#
	#		$ResultsDataTable_OBJ | Export-Csv  -NoTypeInformation $CsvFile_NME
	#
	#		# Launch the file with Excel
	#		
	#		& $ExcelFileSpecification_NME $CsvFile_NME
	#	} else {
	#		<###############################################################
	#		#
	#		# Excel is not installed; so, display the SQL Server result set
	#		# in a GUI grid
	#		#
	#		###############################################################>
	#
	#		$ResultsDataTable_OBJ | Out-GridView
	#	}
	
		<###############################################################
		#
		# Open the SQL Server result set in HTML
		#
		# See https://blogs.technet.microsoft.com/heyscriptingguy/2012/06/05/powershell-in-depth-part-2/		
		#
		###############################################################>
	
		$HTMLFile_NME = "$DBA_LOGS\issue_tracker.htm"
	
		# Create HTML header string
		
	#	$HTML_Header_STR = @"
	#<style>
	#body
	#	{
	#	background-color:#dddddd;
	#	font-family:Tahoma;
	#	font-size:12pt;
	#	}
	#
	#td, th
	#	{
	#	border:1px solid black;
	#	border-collapse:collapse;
	#	}
	#
	#th
	#	{
	#	color:white;
	#	background-color:black;
	#	text-align:center;
	#	vertical-align:bottom;
	#	}
	#
	#table, tr, td
	#	{
	#	padding: 2px; margin: 0px;
	#	vertical-align:top;
	#	}
	#
	#table
	#	{
	#	margin-left:0px;
	#	}
	#</style>
	#"@
	
		$HTML_Header_STR = @"
<style>
body
	{
	background-color : #EDEDED;
	font-family      : verdana,helvetica,arial,sans-serif;
	font-size        : 12pt;
	}

td, th
	{
	border          : 1px solid black;
	border-collapse : collapse;
	}

th
	{
	color            : white;
	background-color : darkgray;
	border-color     : gray;
	font-family      : georgia;
	font-weight      : normal;
	font-size        : 18px;
	text-align       : center;
	vertical-align   : bottom;
	text-decoration  : none;
	}

table, tr, td
	{
	padding        : 2px; 
	margin         : 0px;
	vertical-align : top;
	}

table
	{
	margin-left : 0px;
	}
</style>
"@
	
		$Current_DTE = Get-Date -format "MM/dd/yyyy HH:mm:ss"
	
	#	$HTML_Fragment1_STR = $ResultsDataTable_OBJ | ConvertTo-Html -As LIST  -Fragment -PreContent "<H2>Issue Tracker</H2>" | Out-String
	#	$HTML_Fragment2_STR = $ResultsDataTable_OBJ | Select-Object Assignee, ID, 'Status Code', 'Queue Order', 'Status Date', Location, Customer, 'Short Description', 'Create Date', 'Due Date', Ticket, Comment | ConvertTo-Html -As TABLE -Fragment -PreContent "<H2>Test H2 Header</H2>" | Out-String
		$HTML_Fragment2_STR = $ResultsDataTable_OBJ | Select-Object Assignee, ID, 'Status Code', 'Queue Order', 'Status Date', Location, Customer, 'Short Description', 'Create Date', 'Due Date', Ticket, Comment | ConvertTo-Html -As TABLE -Fragment | Out-String
			
	#	ConvertTo-Html -Head $HTML_Header_STR -PreContent "<H1>Test H1 Header</H1>" -PostContent $HTML_Fragment2_STR,$HTML_Fragment1_STR > "$DBA_LOGS\issue_tracker.htm"
		ConvertTo-Html -Head $HTML_Header_STR -PreContent "<CENTER><H2>Issue Tracker<BR>Current Issues as of<BR>$Current_DTE</H2></CENTER>" -PostContent $HTML_Fragment2_STR,"<HR><CENTER>--- End of Report ---</CENTER>" > $HTMLFile_NME
		
		Start-Process $HTMLFile_NME
	
	#	<###############################################################
	#	#
	#	# Send output file via SMTP Message
	#	#
	#	# This code does not work!
	#	#
	#	###############################################################>
	#
	#	$Mailer = new-object Net.Mail.SMTPclient($SMTPServer)
	#
	#	$From           = "$DBA_EmailDefaultFrom_ADR"
	#	$To             = "jonathan.p.shewbridge.ctr@mail.mil"
	#	$Subject        = "[YOUR_SUBJECT] " # + $currdate + ". " + $DataSet.Tables[0].Rows.Count + " records to report."
	#	$Body           = $body
	#
	#	$Msg            = new-object Net.Mail.MailMessage($From,$To,$Subject,$Body)
	#	$Msg.IsBodyHTML = $False
	#	
	#	$Attachment     = new-object Net.Mail.Attachment($CsvFile_NME)
	#	$Msg.attachments.add($Attachment)
	#	
	#	$Mailer.send($Msg)
	
		$MainForm.Show()
	}
	
	$buttonCreateNewIssue_Click={
		#TODO: Place custom script here
		
	#	$formMain.Hide()
		Call-ChildFormEditIssue_psf 0
	#	$formMain.Close()
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_textboxSearchWildCard_STR = $textboxSearchWildCard_STR.Text
		$script:MainForm_textboxSearchIssue_ID = $textboxSearchIssue_ID.Text
		$script:MainForm_comboboxSearchStatus_CDE = $comboboxSearchStatus_CDE.Text
		$script:MainForm_comboboxSearchStatus_CDE_SelectedItem = $comboboxSearchStatus_CDE.SelectedItem
		$script:MainForm_comboboxSearchStatusGroup_CDE = $comboboxSearchStatusGroup_CDE.Text
		$script:MainForm_comboboxSearchStatusGroup_CDE_SelectedItem = $comboboxSearchStatusGroup_CDE.SelectedItem
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonSearchByWildCardText.remove_Click($buttonSearchByWildCardText_Click)
			$buttonSearchByID.remove_Click($buttonSearchByID_Click)
			$buttonCurrentIssues.remove_Click($buttonCurrentIssues_Click)
			$buttonCreateNewIssue.remove_Click($buttonCreateNewIssue_Click)
			$buttonUpdateImplementation.remove_Click($buttonUpdateImplementation_Click)
			$buttonSearchByStatus.remove_Click($buttonSearchByStatus_Click)
			$buttonSearchByStatusGroup.remove_Click($buttonSearchByStatusGroup_Click)
			$buttonSearchForAssignee.remove_Click($buttonSearchForAssignee_Click)
			$buttonExit.remove_Click($buttonExit_Click)
			$MainForm.remove_Load($MainForm_Load)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$groupbox4.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($groupbox4)
	$MainForm.Controls.Add($groupbox3)
	$MainForm.Controls.Add($groupbox2)
	$MainForm.Controls.Add($groupbox1)
	$MainForm.Controls.Add($buttonExit)
	$MainForm.CancelButton = $buttonExit
	$MainForm.ClientSize = '473, 433'
	$MainForm.Name = 'MainForm'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'Issue Tracker Menu'
	$MainForm.add_Load($MainForm_Load)
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($textboxSearchWildCard_STR)
	$groupbox4.Controls.Add($textboxSearchIssue_ID)
	$groupbox4.Controls.Add($labelSearchWildCardText)
	$groupbox4.Controls.Add($buttonSearchByWildCardText)
	$groupbox4.Controls.Add($labelSearchIssueID)
	$groupbox4.Controls.Add($buttonSearchByID)
	$groupbox4.Location = '13, 146'
	$groupbox4.Name = 'groupbox4'
	$groupbox4.Size = '446, 87'
	$groupbox4.TabIndex = 7
	$groupbox4.TabStop = $False
	$groupbox4.Text = 'All Issues'
	#
	# textboxSearchWildCard_STR
	#
	$textboxSearchWildCard_STR.Location = '145, 55'
	$textboxSearchWildCard_STR.Name = 'textboxSearchWildCard_STR'
	$textboxSearchWildCard_STR.Size = '100, 20'
	$textboxSearchWildCard_STR.TabIndex = 10
	#
	# textboxSearchIssue_ID
	#
	$textboxSearchIssue_ID.Location = '145, 19'
	$textboxSearchIssue_ID.Name = 'textboxSearchIssue_ID'
	$textboxSearchIssue_ID.Size = '100, 20'
	$textboxSearchIssue_ID.TabIndex = 8
	#
	# labelSearchWildCardText
	#
	$labelSearchWildCardText.Location = '7, 55'
	$labelSearchWildCardText.Name = 'labelSearchWildCardText'
	$labelSearchWildCardText.Size = '122, 23'
	$labelSearchWildCardText.TabIndex = 6
	$labelSearchWildCardText.Text = 'Search Wild Card Text'
	#
	# buttonSearchByWildCardText
	#
	$buttonSearchByWildCardText.Location = '273, 55'
	$buttonSearchByWildCardText.Name = 'buttonSearchByWildCardText'
	$buttonSearchByWildCardText.Size = '158, 23'
	$buttonSearchByWildCardText.TabIndex = 11
	$buttonSearchByWildCardText.Text = 'Search by Wild Card Text'
	$buttonSearchByWildCardText.UseVisualStyleBackColor = $True
	$buttonSearchByWildCardText.add_Click($buttonSearchByWildCardText_Click)
	#
	# labelSearchIssueID
	#
	$labelSearchIssueID.Location = '7, 19'
	$labelSearchIssueID.Name = 'labelSearchIssueID'
	$labelSearchIssueID.Size = '122, 23'
	$labelSearchIssueID.TabIndex = 4
	$labelSearchIssueID.Text = 'Search Issue ID'
	#
	# buttonSearchByID
	#
	$buttonSearchByID.Location = '273, 19'
	$buttonSearchByID.Name = 'buttonSearchByID'
	$buttonSearchByID.Size = '158, 23'
	$buttonSearchByID.TabIndex = 9
	$buttonSearchByID.Text = 'Search by ID'
	$buttonSearchByID.UseVisualStyleBackColor = $True
	$buttonSearchByID.add_Click($buttonSearchByID_Click)
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($buttonCurrentIssues)
	$groupbox3.Location = '13, 301'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '446, 89'
	$groupbox3.TabIndex = 14
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'Reporting'
	#
	# buttonCurrentIssues
	#
	$buttonCurrentIssues.Location = '7, 19'
	$buttonCurrentIssues.Name = 'buttonCurrentIssues'
	$buttonCurrentIssues.Size = '122, 23'
	$buttonCurrentIssues.TabIndex = 15
	$buttonCurrentIssues.Text = 'Current Issues'
	$buttonCurrentIssues.UseVisualStyleBackColor = $True
	$buttonCurrentIssues.add_Click($buttonCurrentIssues_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($buttonCreateNewIssue)
	$groupbox2.Controls.Add($buttonUpdateImplementation)
	$groupbox2.Controls.Add($comboboxSearchStatus_CDE)
	$groupbox2.Controls.Add($comboboxSearchStatusGroup_CDE)
	$groupbox2.Controls.Add($label1)
	$groupbox2.Controls.Add($buttonSearchByStatus)
	$groupbox2.Controls.Add($labelSearchStatusGroup)
	$groupbox2.Controls.Add($buttonSearchByStatusGroup)
	$groupbox2.Location = '13, 13'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '446, 127'
	$groupbox2.TabIndex = 1
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'My Issues'
	#
	# buttonCreateNewIssue
	#
	$buttonCreateNewIssue.Anchor = 'Top, Right'
	$buttonCreateNewIssue.Location = '273, 84'
	$buttonCreateNewIssue.Name = 'buttonCreateNewIssue'
	$buttonCreateNewIssue.Size = '158, 23'
	$buttonCreateNewIssue.TabIndex = 17
	$buttonCreateNewIssue.Text = 'Create New Issue'
	$buttonCreateNewIssue.UseVisualStyleBackColor = $True
	$buttonCreateNewIssue.add_Click($buttonCreateNewIssue_Click)
	#
	# buttonUpdateImplementation
	#
	$buttonUpdateImplementation.Location = '7, 87'
	$buttonUpdateImplementation.Name = 'buttonUpdateImplementation'
	$buttonUpdateImplementation.Size = '225, 23'
	$buttonUpdateImplementation.TabIndex = 6
	$buttonUpdateImplementation.Text = 'Update Implementation Queue Order'
	$buttonUpdateImplementation.UseVisualStyleBackColor = $True
	$buttonUpdateImplementation.add_Click($buttonUpdateImplementation_Click)
	#
	# comboboxSearchStatus_CDE
	#
	$comboboxSearchStatus_CDE.FormattingEnabled = $True
	$comboboxSearchStatus_CDE.Location = '145, 55'
	$comboboxSearchStatus_CDE.Name = 'comboboxSearchStatus_CDE'
	$comboboxSearchStatus_CDE.Size = '121, 21'
	$comboboxSearchStatus_CDE.TabIndex = 4
	#
	# comboboxSearchStatusGroup_CDE
	#
	$comboboxSearchStatusGroup_CDE.FormattingEnabled = $True
	$comboboxSearchStatusGroup_CDE.Location = '145, 20'
	$comboboxSearchStatusGroup_CDE.Name = 'comboboxSearchStatusGroup_CDE'
	$comboboxSearchStatusGroup_CDE.Size = '121, 21'
	$comboboxSearchStatusGroup_CDE.TabIndex = 2
	#
	# label1
	#
	$label1.Location = '7, 55'
	$label1.Name = 'label1'
	$label1.Size = '122, 23'
	$label1.TabIndex = 1
	$label1.Text = 'Search Status'
	#
	# buttonSearchByStatus
	#
	$buttonSearchByStatus.Location = '273, 55'
	$buttonSearchByStatus.Name = 'buttonSearchByStatus'
	$buttonSearchByStatus.Size = '158, 23'
	$buttonSearchByStatus.TabIndex = 5
	$buttonSearchByStatus.Text = 'Search by Status'
	$buttonSearchByStatus.UseVisualStyleBackColor = $True
	$buttonSearchByStatus.add_Click($buttonSearchByStatus_Click)
	#
	# labelSearchStatusGroup
	#
	$labelSearchStatusGroup.Location = '7, 20'
	$labelSearchStatusGroup.Name = 'labelSearchStatusGroup'
	$labelSearchStatusGroup.Size = '122, 23'
	$labelSearchStatusGroup.TabIndex = 1
	$labelSearchStatusGroup.Text = 'Search Status Group'
	#
	# buttonSearchByStatusGroup
	#
	$buttonSearchByStatusGroup.Location = '273, 20'
	$buttonSearchByStatusGroup.Name = 'buttonSearchByStatusGroup'
	$buttonSearchByStatusGroup.Size = '158, 23'
	$buttonSearchByStatusGroup.TabIndex = 3
	$buttonSearchByStatusGroup.Text = 'Search by Status Group'
	$buttonSearchByStatusGroup.UseVisualStyleBackColor = $True
	$buttonSearchByStatusGroup.add_Click($buttonSearchByStatusGroup_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($buttonSearchForAssignee)
	$groupbox1.Location = '13, 239'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '446, 56'
	$groupbox1.TabIndex = 12
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Table Maintenance'
	#
	# buttonSearchForAssignee
	#
	$buttonSearchForAssignee.Location = '6, 19'
	$buttonSearchForAssignee.Name = 'buttonSearchForAssignee'
	$buttonSearchForAssignee.Size = '122, 23'
	$buttonSearchForAssignee.TabIndex = 13
	$buttonSearchForAssignee.Text = 'Search for Assignee'
	$buttonSearchForAssignee.UseVisualStyleBackColor = $True
	$buttonSearchForAssignee.add_Click($buttonSearchForAssignee_Click)
	#
	# buttonExit
	#
	$buttonExit.DialogResult = 'Cancel'
	$buttonExit.Location = '384, 398'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 16
	$buttonExit.Text = 'Exit'
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$groupbox3.ResumeLayout()
	$groupbox4.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	#region Get-ScriptDirectory
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	#endregion
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	#region ExecuteDbDataReaderSqlQuery
		<###############################################################
		#
		# Execute a query and populate the $Datatable_OBJ object with the data
		#
		# This function support reads and writes to the database
		#
		###############################################################>
	
	function ExecuteDbDataReaderSqlQuery ($DatabaseConnection_STR, $Database_NME, $SQLCommand_STR)
	{
		#	Write-Output "Globals.ps1 `$DatabaseConnection_STR = $DatabaseConnection_STR"
		#	Write-Output "Globals.ps1 `$Database_NME           = $Database_NME"
		#	Write-Output "Globals.ps1 `$SQLCommand_STR         = $SQLCommand_STR"
		
		$Datatable_OBJ = New-Object System.Data.DataTable
		
		$Connection = New-Object System.Data.SQLClient.SQLConnection
		$Connection.ConnectionString = "server = '$DatabaseConnection_STR'; database = '$Database_NME'; trusted_connection = true;"
		
		# Open the database connection
		
		$Connection.Open()
		
		$Command = New-Object System.Data.SQLClient.SQLCommand
		$Command.Connection = $Connection
		$Command.CommandText = $SQLCommand_STR
		
		try
		{
			$DbDataReader_OBJ = $Command.ExecuteReader()
		}
		catch
		{
			$ErrorMessageTitle_STR = "Error in function ExecuteDbDataReaderSqlQuery"
			
			$ErrorMessage_STR = "
An error occurred while attempting to access the [$Database_NME] database in the SQL Server $DatabaseConnection_STR instance.

PowerShell Error: $error[0].ToString()"
	
			if ($Debug_SW -eq 1)
			{
			$ErrorMessage_STR = $ErrorMessage_STR + "
SQL Command:
	$SQLCommand_STR"
			}
	
			[void][System.Windows.Forms.MessageBox]::Show($ErrorMessage_STR, $ErrorMessageTitle_STR)
		}
		
		$Datatable_OBJ.Load($DbDataReader_OBJ)
		
		# Close the database connection
		
		$Connection.Close()
		
		return $Datatable_OBJ
	}
	#endregion
	
	#region Get-Datatable
		<###############################################################
		#
		# Execute a query and populate the $ds object with the data
		#
		# This function reads the database in a way that can be used to 
		# populate a DataGridView
		#
		# This code is based on https://www.sapien.com/forums/viewtopic.php?f=21&t=10337&p=55948#p55948
		#
		###############################################################>
	
	function Get-Datatable
	{
		Param (
			$DatabaseConnection_STR,
			$Database_NME,
			$SQLCommand_STR
		)
		
		Try
		{
			$connStr = 'Integrated Security=SSPI;Data Source={0};Initial Catalog="{1}";' -f $DatabaseConnection_STR, $Database_NME
			
			$Conn = New-Object System.Data.SQLClient.SQLConnection($connStr)
			
			$Conn.Open()
			
			$cmd = $Conn.CreateCommand()
			$cmd.CommandText = $SQLCommand_STR
			
			$ds = New-Object System.Data.DataSet
			$adapt = New-Object System.Data.SqlClient.SqlDataAdapter($cmd)
			$ret = $adapt.Fill($ds)
			
			$ds
			
			$Conn.Close()
		}
		catch
		{
			[void][System.Windows.Forms.MessageBox]::Show($_)
			
			Throw
		}
	}
	#endregion
	
	#region clean_up_field
		<###############################################################
		#
		# Clean up a data field before writing into the database
		#
		###############################################################>
	
	function clean_up_field ($EditType_SW, $InputField_OBJ)
	{
		if ($Debug_SW -eq 1)
		{
			Write-Host ""
			write-host "$(get-date): Begin clean_up_field: $InputField"
			Write-Host ""
			Write-Host "    `$EditType_SW        = $EditType_SW"
			Write-Host "    `$InputField_OBJ     = $InputField_OBJ"
		}
		
		# Return "null" if  $InputField_OBJ is null
		
		if ($InputField_OBJ -eq $null)
		{
			$OutputField_OBJ = "null"
			
			return $OutputField_OBJ
		}
		
		# Determine the datatype of $InputField_OBJ
	
		$InputFieldType_STR = $InputField_OBJ.GetType().Name
	
		# Determine the length of $InputField_OBJ
	
		$Long_QTY = $InputField_OBJ.length
	
		if ($Debug_SW -eq 1)
		{
			Write-Host "    `$InputFieldType_STR = $InputFieldType_STR"
			Write-Host "    `$Long_QTY           = $Long_QTY"
		}
	
		switch ($EditType_SW)
			{
			"DateTime"
				{
					if ($InputFieldType_STR -eq "DateTime")
					{
						# Add single quotes to the date time value
						
						[string]$OutputField_OBJ = "'" + [string]$InputField_OBJ + "'"
					} else {
						[string]$OutputField_OBJ = "null"
					}
				}
			"Text"
				{
					if ($Long_QTY -gt 0)
					{
						# Remove white space at end of variable
			
						$InputField_OBJ = $InputField_OBJ.trim()
		
						# Escape single quotes
						
						[string]$OutputField_OBJ = $InputField_OBJ.Replace('''', '''''')
						
						# Add single quotes to the string
						
						[string]$OutputField_OBJ = "'" + $OutputField_OBJ + "'"
					} else {
						[string]$OutputField_OBJ = "null"
					}
				}
			"Number"
				{
					if ($InputField_OBJ -match "[0-9]")
					{
						# Input is numeric
						[string]$OutputField_OBJ = $InputField_OBJ
					} else {
						# Input is not numeric--return a null
						[string]$OutputField_OBJ = "null"
					}
				}
			default
				{
					# Unsupported edit type--return $false to the caller
				
					return $false
				}
			}
	
		if ($Debug_SW -eq 1)
		{
			Write-Host ""
			Write-Host "    `$OutputField_OBJ    = $OutputField_OBJ"
			Write-Host ""
			write-host "$(get-date): End clean_up_field"
			Write-Host ""
		}
		
		# Return the cleaned up data to the calling code
		
		$OutputField_OBJ
	}
	#endregion
	
	#region validation functions
	function Validate-FileName
	{
		<#
			.SYNOPSIS
				Validates if the file name has valid characters
		
			.DESCRIPTION
				Validates if the file name has valid characters
		
			.PARAMETER  FileName
				A string containing a file name
		
			.INPUTS
				System.String
		
			.OUTPUTS
				System.Boolean
		#>
		[OutputType([Boolean])]
		param([string]$Filename)
		
		if ($Filename -eq $null -or $Filename -eq "")
	    {
			return $false
		}
		 
		$invalidChars = [System.IO.Path]::GetInvalidFileNameChars();
	
	    foreach ($fileChar in $Filename)
	    {
	        foreach ($invalid in $invalidChars)
	        {
	            if ($fileChar -eq $invalid)
	            {
					return $false
				}
	        }
	    }
	
		# No invalid characters were found
	
		return $true
	}
	
	function Validate-IsDate
	{
		<#
			.SYNOPSIS
				Validates if input is empty (ignores spaces).
		
			.DESCRIPTION
				Validates if input is empty (ignores spaces).
		
			.PARAMETER  Date
				A string containing a date
		
			.INPUTS
				System.String
		
			.OUTPUTS
				System.Boolean
		#> 
		[OutputType([Boolean])]
		param([string]$Date)
		
		return [DateTime]::TryParse($Date,[ref](New-Object System.DateTime))	
	}
	
	function Validate-IsEmail
	{
		<#
			.SYNOPSIS
				Validates if input is an Email
		
			.DESCRIPTION
				Validates if input is an Email
		
			.PARAMETER  Email
				A string containing an email address
		
			.INPUTS
				System.String
		
			.OUTPUTS
				System.Boolean
		#>
		[OutputType([Boolean])]
		param ([string]$Email)
		
		return $Email -match "^(?("")("".+?""@)|(([0-9a-zA-Z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-zA-Z])@))(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,6}))$"
	}
	
	function Validate-IsEmpty 
	{
		<#
			.SYNOPSIS
				Validates if input is empty.
		
			.DESCRIPTION
				Validates if input is empty.
		
			.PARAMETER  Text
				A string containing an IP address
		
			.INPUTS
				System.String
		
			.OUTPUTS
				System.Boolean
		#>
		[OutputType([Boolean])]
		param([string]$Text)
		
		return [string]::IsNullOrEmpty($Text)
	}
	
	function Validate-IsEmptyTrim 
	{
		<#
			.SYNOPSIS
				Validates if input is empty (ignores spaces).
		
			.DESCRIPTION
				Validates if input is empty (ignores spaces).
		
			.PARAMETER  Text
				A string containing an IP address
		
			.INPUTS
				System.String
		
			.OUTPUTS
				System.Boolean
		#>
		[OutputType([Boolean])]
		param([string]$Text)
		
		if($text -eq $null -or $text.Trim().Length -eq 0)
		{
			return $true	
		}
		
		return $false
	}
	
	function Validate-IsIP
	{
		<#
			.SYNOPSIS
				Validates if input is an IP Address
		
			.DESCRIPTION
				Validates if input is an IP Address
		
			.PARAMETER  IP
				A string containing an IP address
		
			.INPUTS
				System.String
		
			.OUTPUTS
				System.Boolean
		#>	
		[OutputType([Boolean])]
		param([string] $IP)
		#Regular Express
		#return $IP -match "\b(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b"
		#Parse using a IPAddress static method
		try
		{
			return ([System.Net.IPAddress]::Parse($IP) -ne $null)
		}
		catch
		{
		}
		
		return $false
	}
	
	function Validate-IsName
	{
		<#
			.SYNOPSIS
				Validates if input is english name
		
			.DESCRIPTION
				Validates if input is english name
		
			.PARAMETER  Name
				A string containing a name 
		
			.INPUTS
				System.String
		
			.OUTPUTS
				System.Boolean
		#>
		[OutputType([Boolean])]
		param ([string] $Name, [int]$MaxLength)
		
		if($MaxLength -eq $null -or $MaxLength -le 0)
		{#Set default length to 40
			$MaxLength = 40
		}
		
		return $Name -match "^[a-zA-Z''-'\s]{1,$MaxLength}$"
	}
	
	function Validate-IsURL
	{
		<#
			.SYNOPSIS
				Validates if input is an URL
		
			.DESCRIPTION
				Validates if input is an URL
		
			.PARAMETER  Url
				A string containing an URL address
		
			.INPUTS
				System.String
		
			.OUTPUTS
				System.Boolean
		#>
		[OutputType([Boolean])]
		param ([string]$Url)
		
		if($Url -eq $null)
		{
			return $false	
		}
		
		return $Url -match "^(ht|f)tp(s?)\:\/\/[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&amp;%\$#_]*)?$"
	}
	
	function Validate-IsUSPhone
	{
		<#
			.SYNOPSIS
				Validates if input is an phone number
		
			.DESCRIPTION
				Validates if input is an phone number
		
			.PARAMETER  Phone
				A string containing an phone address
		
			.INPUTS
				System.String
		
			.OUTPUTS
				System.Boolean
		#> 
		[OutputType([Boolean])]
		param([string]$Phone)
		
		return $Phone -match "^[01]?[- .]?(\([2-9]\d{2}\)|[2-9]\d{2})[- .]?\d{3}[- .]?\d{4}$"
	}
	
	function Validate-IsZipCode
	{
		<#
			.SYNOPSIS
				Validates if input is a zipcode
		
			.DESCRIPTION
				Validates if input is a zipcode
		
			.PARAMETER  ZipCode
				A string containing an zipcode 
		
			.INPUTS
				System.String
		
			.OUTPUTS
				System.Boolean
		#>
		[OutputType([Boolean])]
		param ([string]$ZipCode)
		
		return $ZipCode -match "^(\d{5}-\d{4}|\d{5}|\d{9})$|^([a-zA-Z]\d[a-zA-Z] \d[a-zA-Z]\d)$"	
	}
	
	function Validate-Path
	{
		<#
			.SYNOPSIS
				Validates if path has valid characters
		
			.DESCRIPTION
				Validates if path has valid characters
		
			.PARAMETER  Path
				A string containing a directory or file path
		
			.INPUTS
				System.String
		
			.OUTPUTS
				System.Boolean
		#>
		[OutputType([Boolean])]
		param([char[]]$Path)
		
	    if ($Path -eq $null -or [string]$Path -eq "")
	    {
			return $false
		}
		
	    $invalidChars = [System.IO.Path]::GetInvalidPathChars();
	
	    foreach ($pathChar in $Path)
	    {
	        foreach ($invalid in $invalidChars)
	        {
	            if ($pathChar -eq $invalid)
	            {
					return $false
				}
	        }
	    }
	
	    return $true
	}
	#endregion
	
		<###############################################################
		#
		# Function to display non-Production environment notification
		#
		###############################################################>
	
	function display_nonproduction_environment
		{
			
			if ($Environment_NME -ne "Production")
			{
				$This.Text = "$Environment_NME " + $This.Text
				$This.BackColor = "$NonProductionFormBackgroundColor_NME"
			}
		}
	
		<###############################################################
		#
		# Load any additional assemblies
		#
		###############################################################>
	
		[System.Reflection.Assembly]::LoadWithPartialName("System.Windows.Forms") # This is required for Messagebox to work
	
		<###############################################################
		#
		# Call the profile if it is missing (because PowerShell Studio
		# does not call the profile by default)
		#
		###############################################################>
	
		if ($DBA_SCRIPTS -eq $null)
		{
			. $PSHOME\profile.ps1
		}
	
		<###############################################################
		#
		# Housekeeping
		#
		###############################################################>
	
		$OS_OBJ                        = Get-WmiObject -class Win32_OperatingSystem
	
		[string]$OSVersion_NME         = $OS_OBJ.Caption
		[string]$OSVersion_NBR         = $OS_OBJ.Version
	
		[string]$PowerShellVersion_STR = "$($PSVersionTable.PSVersion.Major).$($PSVersionTable.PSVersion.Minor)"
		[float]$PowerShellVersion_NBR  = $PowerShellVersion_STR
	
		$CurrentUser_NME               = [System.Security.Principal.WindowsIdentity]::GetCurrent().Name
	
		if ($Debug_SW -eq 1)
		{
			Write-Output ""
			Write-Output "`$Debug_SW              = $Debug_SW"
			Write-Output "`$User_SW               = $User_SW"
	
			Write-Output "`$OSVersion_NME         = $OSVersion_NME"
			Write-Output "`$OSVersion_NBR         = $OSVersion_NBR"
		
			Write-Output "`$PowerShellVersion_STR = $PowerShellVersion_STR"
			Write-Output "`$PowerShellVersion_NBR = $PowerShellVersion_NBR"
		
			Write-Output "`$CurrentUser_NME       = $CurrentUser_NME"
		}
		
		<###############################################################
		#
		# Build the name of the script configuration file
		#
		###############################################################>
	
		[string]$ScriptDirectory = Get-ScriptDirectory
	
		$ScriptConfigurationFile_NME = "$ScriptDirectory\settings.ps1"
	
		if ($Debug_SW -eq 1)
		{
			Write-Output "`$ScriptConfigurationFile_NME = $ScriptConfigurationFile_NME"
		}
	
		<###############################################################
		#
		# Create the configuration file, if it is missing
		#
		###############################################################>
	
		Write-Output ""
	
		if (test-path -path $ScriptConfigurationFile_NME)
		{
			# Settings.ps1 was found
		}
		else
		{
			# Settings.ps1 was not found
		
			Write-Output "$(get-date): Creating the missing `$ScriptConfigurationFile_NME file ($ScriptConfigurationFile_NME)"
		
			$Long_QTY = $CurrentUser_NME.Length
		
			$Admin_STR = "Admin"
			$Admin_STR = $Admin_STR.PadRight($Long_QTY, " ")
		
			$Dot_STR = "."
			$Dot_STR = $Dot_STR.PadRight($Long_QTY, ".")
		
			Write-Output "
	<###############################################################
	#
	# Filename:           settings.ps1
	#
	# Description:        This file is a configuration script
	#
	#                     `$DatabaseConnection_STR--the connection 
	#                     string for the issue tracker database (for
	#                     example, sql_server_network_name\my_instance_name)
	#
	#                     `$Database_NME--the name of the database
	#                     that contains the issue tracker data (for
	#                     example, issue_tracker)
	#
	#                     `$Environment_NME--the name of the 
	#                     processing environment; when this variable 
	#                     is set to something other than `"Production,`" 
	#                     the form title bars will display the 
	#                     contents of this variable and change the 
	#                     background form color to
	#                     `$NonProductionFormBackgroundColor_NME
	#
	#                     `$NonProductionFormBackgroundColor_NME--the
	#                     form background color for non-Production 
	#                     processing environments
	#
	# Windows Version:    $OSVersion_NME ($OSVersion_NBR)
	# PowerShell Version: $PowerShellVersion_STR
	# SQL Server Version: 2012, 2014
	#
	# Edit History:
	#
	# MM/DD/YYYY  $Admin_STR  Description
	# ..........  $Dot_STR  ......................................................................................
	# $(Get-Date -format "MM/dd/yyyy")  $CurrentUser_NME  Created command file
	#
	###############################################################>

	# Please confirm that the following variables are set correctly for this processing environment

	[string]`$DatabaseConnection_STR               = `"$DBA_MetricsDatabaseConnection_STR`" # SQL Server database connection string
	[string]`$Database_NME                         = `"issue_tracker`" # SQL Server database name
	[string]`$Environment_NME                      = `"Production`" # Application environment name (for example, Production, Test, or Development)
	[string]`$NonProductionFormBackgroundColor_NME = `"LightYellow`" # Non-Production form background color (for example, LightYellow, Tan, Pink)
" > $ScriptConfigurationFile_NME # End of Write-Output command
			
			Start-Process notepad.exe $ScriptConfigurationFile_NME -wait
		}
	
		<###############################################################
		#
		# Execute the configuration file to pick up the script settings
		#
		###############################################################>
	
		Write-Output ""
		Write-Output "$(get-date): Now `"dot sourcing`" the `$ScriptConfigurationFile_NME file located at $ScriptConfigurationFile_NME"
	
		. $ScriptConfigurationFile_NME
		
		<###############################################################
		#
		# Determine the assignee_cde of the current user
		#
		###############################################################>
		
		[array]$CurrentAssignee_CDE = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR "select assignee_cde from assignee where user_nme = '$CurrentUser_NME';"
	
		[string]$CurrentAssignee_CDE = $CurrentAssignee_CDE.assignee_cde
		
		if ($Debug_SW -eq 1)
		{
			Write-Host ""
			Write-Host "`$DatabaseConnection_STR               = $DatabaseConnection_STR"
			Write-Host "`$Database_NME                         = $Database_NME"
			Write-Host "`$Environment_NME                      = $Environment_NME"
			Write-Host "`$NonProductionFormBackgroundColor_NME = $NonProductionFormBackgroundColor_NME"
			Write-Host "`$CurrentUser_NME                      = $CurrentUser_NME"
			Write-Host "`$CurrentAssignee_CDE                  = $CurrentAssignee_CDE"
		
	#		# Potentially use a version number to identify which script is running--see https://www.sapien.com/forums/viewtopic.php?t=10061
	#		$ScriptVersion_NBR = [System.Windows.Forms.Application]::ProductVersion
	#		Write-Host "`$ScriptVersion_NBR                    = $ScriptVersion_NBR"
		}
	
		<###############################################################
		#
		# Load arrays with combobox validation data
		#
		# A single set of loads takes place here so that multiple trips
		# to the database can be avoided for the same data
		#
		###############################################################>
	
		[array]$LocationCode_ARY     = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR "select location_cde, location_dsc   from location  order by display_order_nbr;"
		[array]$PriorityCode_ARY     = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR "select priority_cde, priority_dsc   from priority  order by display_order_nbr;"
		[array]$WorkTypeCode_ARY     = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR "select work_type_cde, work_type_dsc from work_type order by work_type_cde;"
		[array]$CustomerCode_ARY     = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR "select customer_cde, customer_nme   from customer  order by customer_cde;"
	
		[array]$StatusCode_ARY       = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR "select status_cde, status_dsc       from status    order by display_order_nbr;"
	#	[array]$StatusCode_ARY       = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR "select 'All', 'All statuses', 0 as display_order_nbr union all select status_cde, status_dsc, display_order_nbr from status order by display_order_nbr;"
		
		[array]$StatusGroupCode_ARY  = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR "select distinct status_group_cde    from status    order by status_group_cde;"
	
		[array]$CategoryCode_ARY     = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR "select category_cde, category_dsc   from category  order by category_cde;"
	
		[array]$QueueOrder_ARY       = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR "select '' as queue_order_nbr, '(Empty)'            union all select convert(varchar, queue_order_nbr), queue_order_dsc from queue_order order by queue_order_nbr;"
		[array]$AssigneeCode_ARY     = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR "select '' as assignee_cde,    '(Empty)', '(Empty)' union all select assignee_cde, first_nme, last_nme as full_nme      from assignee    order by assignee_cde;"
	
	#	<###############################################################
	#	#
	#	# Handle the debug temp.txt file
	#	#
	#	###############################################################>
	#
	#	if ($Debug_SW -eq 1)
	#	{
	#		$DebugFile_NME = "temp.txt"
	#		
	#		Write-Output "--- Globals.ps1 ------------------------------" >  $DebugFile_NME
	#		Write-Output "`$StatusCode_ARY"                               >> $DebugFile_NME
	#		$StatusCode_ARY                                               >> $DebugFile_NME
	#		Write-Output "--- Globals.ps1 ------------------------------" >> $DebugFile_NME
	#		Write-Output "`$StatusGroupCode_ARY"                          >> $DebugFile_NME
	#		$StatusGroupCode_ARY                                          >> $DebugFile_NME
	#		
	#		notepad $DebugFile_NME
	#	}
	#endregion Source: Globals.ps1

#region Source: ChildFormSearchForAssignee.psf
function Call-ChildFormSearchForAssignee_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
WhYAAB+LCAAAAAAABADVWFtv2jAUfp+0/2DlYU9RIVxbDSK10G7T6GWUddsTcpIT6tWxkeMU2K+f
Q0IbIC0OBbQJCZFwrt/5js9JWn1w+SOIWRdLjNSPkHDWNiqG/f4dQq1rQUaEYXpBKFzhAOzOPaHe
BRfBLWDh3qtfp2FIRgzgaBz6rdKaQmLG+Q2uRHI2hrZxOwslBEc/CPP4JDyKjSXfJsr7y0R3aVS1
o3L8MVEnojIS0GYQSYGpiW4ihxL3K8wG/AFY22k2cd2tN6yTag3KxycGYiqUtuEre5eYMAO5cRpC
iRodzqTgNEwSVrHeCD4GIWepzqnrwlieRVJytpBRUn3wQem7kIo5c4EEFAOVFsZKC2svWO9gZYJq
Wj+fElnENiXA5C35A4bdPK6ZqNqobFSKa2bYC6A2ig9gKg07SRspLbRgw7rm+aOKJlXrcew9exnG
l63SXGAhvZkxCWh750wCfUcAlvAab3KYw9x7Lgx7wMcm6pPRvVwDZV2px10sSUyGxknTRNZ6xV6q
WTZQDaWUF3UTVaoa4gPsfGEeTJWKjvScFtqxfA/hjoQRprdyRuEMuw8dTufQiShXP8slRXP3YTn9
4fzeCqNKCaX0CRYnccane2eYVH4cPr2KAgfEtd9XPobfBr+2I9sZVzCok7QHfjG6WRWVQrWiU92E
by+ErU09q6wcVsqFuNdYP1YKl7WHHaB7LyqNvWSxOXQ5q8WquRZvwToWO0Pq2mdIEhLiPsoN6p/v
6sVGsPXgiCu/zfiICWDp4LzUzUm42rWvxzOqYA/nSmcPdAVtl0/YSkzD9PZbT/WDrg1vrv4Wa4PV
2GJtKFj3LdYGS7vlP+Bg/FE7oN3tDinPdrI7xE9TnwTx7ghM9s41TzkbKWePylkfQmWl6LShlE8U
kGLATz1vPq3sC0xDnd0to9sFChIKqmfZnp12W515FRPV9Kmfg5uGbh+wd83o7GWGrbaMgsWNA7zk
nvJ6EVGqMEru6ndcI56yzZNCPZcLxRL/OY0C9lllBOKSRyGkDZGDzDBfdrlRVsx3uSLwazYzAv/V
uZ48ib9lodMld5dgykcJXuqJav66oPhjZJFN8DnDfY6DmvY4OJ/PA71wdjcM4vw3joLli9MwhECR
CMKFbHpnZgehywUlzg6I2Co9WV31klD/ED523l6bPcYT9TCOBJ4QNtrGV7nq1/2mb1levYyreLOv
nwE9SE4dLmD3jp4uE8q3Stl3yfZfNkfBZFoWAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMain = New-Object 'System.Windows.Forms.Form'
	$buttonCreate = New-Object 'System.Windows.Forms.Button'
	$textboxNumberOfRows_QTY = New-Object 'System.Windows.Forms.TextBox'
	$labelNumberOfRows = New-Object 'System.Windows.Forms.Label'
	$textboxSearch = New-Object 'System.Windows.Forms.TextBox'
	$buttonSearch = New-Object 'System.Windows.Forms.Button'
	$datagridviewResults = New-Object 'System.Windows.Forms.DataGridView'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	#region Control Helper Functions
	function Load-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The ComboBox control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the ComboBox's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{	
				$array.Add($Item)	
			}
			$DataGridView.DataSource = $array
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($Table -eq $null)
		{
			$Table = New-Object System.Data.DataTable
		}
	
		if($InputObject-is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		else
		{
			if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
	
				if($InputObject -eq $null){ return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach($item in $InputObject)
				{
					if($item -ne $null)
					{
						$object = $item
						break	
					}
				}
	
				if($object -eq $null) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if($prop.Value -ne $null)
						{
							try{ $type = $prop.Value.GetType() } catch {}
						}
	
						if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
			      			[void]$table.Columns.Add($prop.Name, $type) 
						}
						else #Type info not found
						{ 
							[void]$table.Columns.Add($prop.Name) 	
						}
					}
			    }
				
				if($object -is [System.Data.DataRow])
				{
					foreach($item in $InputObject)
					{	
						$Table.Rows.Add($item)
					}
					return  @(,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()	
			}
			
			foreach($item in $InputObject)
			{		
				$row = $table.NewRow()
				
				if($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
	
		return @(,$Table)	
	}
	#endregion
	
	#region Search Function
	function SearchGrid()
	{
		$RowIndex = 0
		$ColumnIndex = 0
		$seachString = $textboxSearch.Text
		
		if($seachString -eq "")
		{
			return
		}
		
		if($datagridviewResults.SelectedCells.Count -ne 0)
		{
			$startCell = $datagridviewResults.SelectedCells[0];
			$RowIndex = $startCell.RowIndex
			$ColumnIndex = $startCell.ColumnIndex + 1
		}
		
		$columnCount = $datagridviewResults.ColumnCount
		$rowCount = $datagridviewResults.RowCount
		for(;$RowIndex -lt $rowCount; $RowIndex++)
		{
			$Row = $datagridviewResults.Rows[$RowIndex]
			
			for(;$ColumnIndex -lt $columnCount; $ColumnIndex++)
			{
				$cell = $Row.Cells[$ColumnIndex]
				
				if($cell.Value -ne $null -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
				{
					$datagridviewResults.CurrentCell = $cell
					return
				}
			}
			
			$ColumnIndex = 0
		}
		
		$datagridviewResults.CurrentCell = $null
		[void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.","String not Found")
		
	}
	#endregion
	
	$formMain_Load={
		#TODO: Initialize Form Controls here
		
	#	# Set watermark text--see https://www.sapien.com/blog/2013/08/14/new-control-set-textbox-watermark/
	#	
	#	$WatermarkText_STR = 'Please enter search text here'
	#	$textBoxSearch.ForeColor = 'LightGray'
	#	$textBoxSearch.Text = $WatermarkText_STR
	
		<###############################################################
		#
		# Display non-Production environment notification
		#
		###############################################################>
	
		display_nonproduction_environment
	
		# Define SQL statement
		
		[string]$SQLCommand_STR = "
select
	assignee_cde,
	first_nme,
	last_nme,
	user_nme,
	email_adr
from
	assignee
order by
	assignee_cde;"
		
		if ($Debug_SW -eq 1)
		{
			Write-Host $SQLCommand_STR	
		}
		
		# Retrieve data from database
		
		$dt = Get-Datatable $DatabaseConnection_STR $Database_NME $SQLCommand_STR
		
		# Put data into datagridview
		
		$datagridviewResults.DataSource = $dt.Tables[0]
		
		# Set datagridview column attributes
		
		$datagridviewResults.Columns[0].HeaderText = "Assignee Code";
		$datagridviewResults.Columns[0].Width = 120;
		
		$datagridviewResults.Columns[1].HeaderText = "First Name";
		$datagridviewResults.Columns[1].Width = 140;
		
		$datagridviewResults.Columns[2].HeaderText = "Last Name";
		$datagridviewResults.Columns[2].Width = 140;
		
		$datagridviewResults.Columns[3].HeaderText = "Username";
		$datagridviewResults.Columns[3].Width = 140;
		
		$datagridviewResults.Columns[4].HeaderText = "Email Address";
		$datagridviewResults.Columns[4].Width = 180;
		
		# Display the row count
		
		$DataGridRowCount_QTY = $datagridviewResults.RowCount
		
		$textboxNumberOfRows_QTY.Text = "{0:N0}" -f $DataGridRowCount_QTY
	}
	
	$buttonExit_Click={
		#TODO: Place custom script here
		
		$formMain.Close()
	}
	
	$buttonSearch_Click={
		#TODO: Place custom script here
		
		SearchGrid
	}
	
	$buttonCreate_Click = {
		#TODO: Place custom script here
		
		$formMain.Hide()
		Call-ChildFormEditAssignee_psf "!CREATE!"
		$formMain.Close()
	}
	
	# For this code to work properly, be aware that:
	#     1) The "SelectionMode" property needs to be set to "FullRowSelect"--see https://www.sapien.com/forums/viewtopic.php?t=9004
	#     2) A Double Click [sic] event, not a Click event needs to be configured for the DataGridView
	
	$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		if($datagridviewResults.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewResults.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	$textboxSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		if($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
		{
			SearchGrid	
			$_.SuppressKeyPress = $true
		}
	}
	
	$datagridviewResults_DoubleClick={
		#TODO: Place custom script here
		
		# See https://www.sapien.com/forums/viewtopic.php?t=9004
		
		#	[void][System.Windows.Forms.MessageBox]::Show($datagridviewResults.SelectedCells[0].FormattedValue, 'You Chose')
		
		#	Write-Host $datagridviewResults.SelectedCells[0].FormattedValue
		
		$formMain.Hide()
		Call-ChildFormEditAssignee_psf $datagridviewResults.SelectedCells[0].FormattedValue
		$formMain.Close()
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMain.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ChildFormSearchForAssignee_textboxNumberOfRows_QTY = $textboxNumberOfRows_QTY.Text
		$script:ChildFormSearchForAssignee_textboxSearch = $textboxSearch.Text
		$script:ChildFormSearchForAssignee_datagridviewResults = $datagridviewResults.SelectedCells
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonCreate.remove_Click($buttonCreate_Click)
			$textboxSearch.remove_KeyDown($textboxSearch_KeyDown)
			$buttonSearch.remove_Click($buttonSearch_Click)
			$datagridviewResults.remove_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
			$datagridviewResults.remove_DoubleClick($datagridviewResults_DoubleClick)
			$buttonExit.remove_Click($buttonExit_Click)
			$formMain.remove_Load($formMain_Load)
			$formMain.remove_Load($Form_StateCorrection_Load)
			$formMain.remove_Closing($Form_StoreValues_Closing)
			$formMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMain.SuspendLayout()
	#
	# formMain
	#
	$formMain.Controls.Add($buttonCreate)
	$formMain.Controls.Add($textboxNumberOfRows_QTY)
	$formMain.Controls.Add($labelNumberOfRows)
	$formMain.Controls.Add($textboxSearch)
	$formMain.Controls.Add($buttonSearch)
	$formMain.Controls.Add($datagridviewResults)
	$formMain.Controls.Add($buttonExit)
	$formMain.AcceptButton = $buttonSearch
	$formMain.CancelButton = $buttonExit
	$formMain.ClientSize = '784, 362'
	$formMain.Name = 'formMain'
	$formMain.Text = 'Search for Assignee'
	$formMain.add_Load($formMain_Load)
	#
	# buttonCreate
	#
	$buttonCreate.Anchor = 'Top, Right'
	$buttonCreate.Location = '697, 12'
	$buttonCreate.Name = 'buttonCreate'
	$buttonCreate.Size = '75, 23'
	$buttonCreate.TabIndex = 7
	$buttonCreate.Text = 'Create'
	$buttonCreate.UseVisualStyleBackColor = $True
	$buttonCreate.add_Click($buttonCreate_Click)
	#
	# textboxNumberOfRows_QTY
	#
	$textboxNumberOfRows_QTY.Anchor = 'Bottom, Left'
	$textboxNumberOfRows_QTY.Location = '120, 327'
	$textboxNumberOfRows_QTY.Name = 'textboxNumberOfRows_QTY'
	$textboxNumberOfRows_QTY.Size = '100, 20'
	$textboxNumberOfRows_QTY.TabIndex = 6
	#
	# labelNumberOfRows
	#
	$labelNumberOfRows.Anchor = 'Bottom, Left'
	$labelNumberOfRows.Location = '13, 327'
	$labelNumberOfRows.Name = 'labelNumberOfRows'
	$labelNumberOfRows.Size = '100, 23'
	$labelNumberOfRows.TabIndex = 5
	$labelNumberOfRows.Text = 'Number of Rows'
	#
	# textboxSearch
	#
	$textboxSearch.Anchor = 'Top, Left, Right'
	$textboxSearch.Location = '13, 15'
	$textboxSearch.Name = 'textboxSearch'
	$textboxSearch.Size = '597, 20'
	$textboxSearch.TabIndex = 0
	$textboxSearch.add_KeyDown($textboxSearch_KeyDown)
	#
	# buttonSearch
	#
	$buttonSearch.Anchor = 'Top, Right'
	$buttonSearch.Location = '616, 12'
	$buttonSearch.Name = 'buttonSearch'
	$buttonSearch.Size = '75, 23'
	$buttonSearch.TabIndex = 1
	$buttonSearch.Text = '&Search'
	$buttonSearch.UseVisualStyleBackColor = $True
	$buttonSearch.add_Click($buttonSearch_Click)
	#
	# datagridviewResults
	#
	$datagridviewResults.AllowUserToAddRows = $False
	$datagridviewResults.AllowUserToDeleteRows = $False
	$datagridviewResults.Anchor = 'Top, Bottom, Left, Right'
	$datagridviewResults.Location = '12, 42'
	$datagridviewResults.Name = 'datagridviewResults'
	$datagridviewResults.ReadOnly = $True
	$datagridviewResults.SelectionMode = 'FullRowSelect'
	$datagridviewResults.Size = '760, 279'
	$datagridviewResults.TabIndex = 2
	$datagridviewResults.add_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
	$datagridviewResults.add_DoubleClick($datagridviewResults_DoubleClick)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.DialogResult = 'Cancel'
	$buttonExit.Location = '697, 327'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 4
	$buttonExit.Text = 'E&xit'
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	$formMain.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formMain.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formMain.ShowDialog()

}
#endregion Source: ChildFormSearchForAssignee.psf

#region Source: ChildFormEditAssignee.psf
function Call-ChildFormEditAssignee_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
ziQAAB+LCAAAAAAABADVmm9v6jYUxt9P2new8nJChfC3SBCJBipN63qvoOv2DpnkwLw6MXNMb7mf
/tok4ZKGgEMIAlVCBY7P88S/4yTHpDcGh70DXw+xwEj+ExDm9426Yf36C0K9L5wsiI/pI6HwjD2w
7H8JdR8Z90YuEYMgIAsf4G4ZzHvVVGyYYfYfOAKJ9RL6xmQdCPDu/ia+y74FdypP+FpB+76qoNfI
UPOupv4qyF5RseLQ92ElOKYV9HU1o8T5A9Yv7A38/qzTwS2n1Ta7jSbU7rsG8qWVvjH/ZNlAjjoS
LocYNvMFZzQIj1l6/srZErhYR2MHjgNL8bASgvlxjIwawxzkeAeisNkmYILfZfJqnKoa58rIbWOZ
gGrmDoPzZKcEfDEh38Gwmm05ffV6/eggxc6wPk/Y0WEv8CEMSw1B2WNG79JPNOCJYTetM1Uf96qb
wHjU8Rp6wjOgpRcRVSq/+y5xsIBgMIb/V4SDO/IPVVN6pp6YHE8Ub7NRQeZ9JzVPWVAyDWhkCKvA
bDVlFTQ04l/wTCrBhxxT0wnf4P8NkdgdwohH/pBkydfpaqiGYPUxK5EH9lE6aCF1ZuzDZp4nrU+H
E/tkwnVpw2zqI05La7NtNOqSrRasLdvWGahccPFF01JoveWAsaupv8RqtdxLrKu9wrLcXP1iGnmY
0OlgOC62lOpm3qW0FS51ITX3Re9e7l4xJa48FH+Rdjb9+eWnS9+1U/0rAD59/nNUCGp37+QdYhrL
6i/KTi030r1L+AjS2NjtEn3CgShMtJ37ghfLlko0ffN7nGhs7HaJPhJ+BqRNnalOIN3qlsp07/Xg
CNOts9uFuu2X7GExrqbOnUqC6660xtgxYPeLT9eG9cJX6Z7w8G1UvlrQjJ4ItjSsR0yDPS1qbvBh
814693ALYAgUxMHdi0PA62Y7X8O5K6pNrtPKff/b1r7/1fYir8SvJFhhOhFrCg/YebMZZTy7CnfP
GbYk8pY8/Onms6JniYsWS7xflKdYhgRTthhDIJVlt7HJoDHbOzXW7ZxSY9pKJ9eYjqOox9L1cr4a
CyVvsMbC/c7TTkeNzv0ppaIkyyyUe+1C0XRyvjJRgucpkgtu2mza3IEr6yMICu3c5Oj9U8Klbt/o
9K/xBunGFMpyddUgVXOr3haBmKPXT2iWyk8rOuKXaeiq0aku9rkguhxNfUKzVHR7W/oMdMoQ2uvo
qtltutWi8HK070nRUunpnNBjehtHN4gvbpdt5hYimKNRT+mWClH/58HYEtrrKUEx+eY40BHnjMuE
78QFXjpYUGrLSM3MenBAEcbEBx6hPvADf/r5hIwf+ZPzIsPBk44hiKOjT9aWFziMUzI7w1H3qtus
n1XCeb6ExtlZHldUz8RcRojjb8RfnKJVa8xb887cNN1WDTfwca1/PHqRY7IZh/MLbd+GJd+r7j6/
ZP0AxDHqws4kAAA=#>
#endregion
param
(
	[string]$SearchAssignee_CDE # A value of !CREATE! indicates that a new row should be created
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formEditAssignee = New-Object 'System.Windows.Forms.Form'
	$labelIndicatesARequiredEn = New-Object 'System.Windows.Forms.Label'
	$textboxComment_DSC = New-Object 'System.Windows.Forms.TextBox'
	$labelComment = New-Object 'System.Windows.Forms.Label'
	$textboxEmail_ADR = New-Object 'System.Windows.Forms.TextBox'
	$textboxUser_NME = New-Object 'System.Windows.Forms.TextBox'
	$textboxLast_NME = New-Object 'System.Windows.Forms.TextBox'
	$textboxFirst_NME = New-Object 'System.Windows.Forms.TextBox'
	$textboxAssignee_CDE = New-Object 'System.Windows.Forms.TextBox'
	$buttonDelete = New-Object 'System.Windows.Forms.Button'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$buttonSave = New-Object 'System.Windows.Forms.Button'
	$labelEmailAddress = New-Object 'System.Windows.Forms.Label'
	$labelUsername = New-Object 'System.Windows.Forms.Label'
	$labelLastName = New-Object 'System.Windows.Forms.Label'
	$labelFirstName = New-Object 'System.Windows.Forms.Label'
	$labelAssigneeCode = New-Object 'System.Windows.Forms.Label'
	$errorprovider1 = New-Object 'System.Windows.Forms.ErrorProvider'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	 # End of param
	
	$formEditAssignee_Load={
		#TODO: Initialize Form Controls here
		
		if ($Debug_SW -eq 1)
		{
			Write-Host "ChildFormEditAssignee.psf `$SearchAssignee_CDE = $SearchAssignee_CDE"
		}
		
		<###############################################################
		#
		# Display non-Production environment notification
		#
		###############################################################>
	
		display_nonproduction_environment
	
		# Define SQL statement
		
		[string]$SQLCommand_STR = "
select
	assignee_cde,
	first_nme,
	last_nme,
	user_nme,
	email_adr,
	comment_dsc
from
	assignee
where
	assignee_cde = '$SearchAssignee_CDE'
	;"
		
		if ($Debug_SW -eq 1)
		{
			Write-Host "$SQLCommand_STR"
		}
		
		# Create an object for the data returned from SQL Server
		
		$ResultsDataTable_OBJ = New-Object System.Data.DataTable
		
		# Execute the SQL query
		
		$ResultsDataTable_OBJ = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR $SQLCommand_STR
		
		<###############################################################
		#
		# Place data onto the form
		#
		###############################################################>
	
		if ($SearchAssignee_CDE -eq "!CREATE!")
		{
			# Disable the Delete button when a new row is being created
			
			$buttonDelete.Enabled = $false
		}
		
		$textboxAssignee_CDE.Text = $ResultsDataTable_OBJ.assignee_cde
		$textboxFirst_NME.Text    = $ResultsDataTable_OBJ.first_nme
		$textboxLast_NME.Text     = $ResultsDataTable_OBJ.last_nme
		$textboxUser_NME.Text     = $ResultsDataTable_OBJ.user_nme
		$textboxEmail_ADR.Text    = $ResultsDataTable_OBJ.email_adr
		$textboxComment_DSC.Text  = $ResultsDataTable_OBJ.comment_dsc
	}
	
	$textboxFirst_NME_Validating = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
		# Configure ErrorProvider
		
		$errorprovider1.SetIconAlignment($textboxFirst_NME, [System.Windows.Forms.ErrorIconAlignment]::MiddleLeft)
		$errorprovider1.SetIconPadding($textboxFirst_NME, 1)
		
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$Result_CDE = Validate-IsEmptyTrim $textboxFirst_NME.Text
		
		if ($Result_CDE -eq $true)
		{
			$script:ValidationFailed = $true
			$errorprovider1.SetError($this, "First name cannot be blank");
		}
		else
		{
			$errorprovider1.SetError($this, "");
		}
	}
	
	$textboxLast_NME_Validating = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
		# Configure ErrorProvider
		
		$errorprovider1.SetIconAlignment($textboxLast_NME, [System.Windows.Forms.ErrorIconAlignment]::MiddleLeft)
		$errorprovider1.SetIconPadding($textboxLast_NME, 1)
		
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$Result_CDE = Validate-IsEmptyTrim $textboxLast_NME.Text
		
		if ($Result_CDE -eq $true)
		{
			$script:ValidationFailed = $true
			$errorprovider1.SetError($this, "Last name cannot be blank");
		}
		else
		{
			$errorprovider1.SetError($this, "");
		}
	}
	
	$textboxUser_NME_Validating = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
		# Configure ErrorProvider
		
		$errorprovider1.SetIconAlignment($textboxUser_NME, [System.Windows.Forms.ErrorIconAlignment]::MiddleLeft)
		$errorprovider1.SetIconPadding($textboxUser_NME, 1)
		
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$Result_CDE = Validate-IsEmptyTrim $textboxUser_NME.Text
		
		if ($Result_CDE -eq $true)
		{
			$script:ValidationFailed = $true
			$errorprovider1.SetError($this, "Username cannot be blank");
		}
		else
		{
			$errorprovider1.SetError($this, "");
		}
	}
	
	$textboxEmail_ADR_Validating = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
		# Configure ErrorProvider
		
		$errorprovider1.SetIconAlignment($textboxEmail_ADR, [System.Windows.Forms.ErrorIconAlignment]::MiddleLeft)
		$errorprovider1.SetIconPadding($textboxEmail_ADR, 1)
		
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$Result_CDE = -not (Validate-IsEmail $textboxEmail_ADR.Text)
		
		if ($Result_CDE -eq $true)
		{
			$script:ValidationFailed = $true
			$errorprovider1.SetError($this, "Invalid Email Address");
		}
		else
		{
			$errorprovider1.SetError($this, "");
		}
	}
	
	$buttonDelete_Click = {
		#TODO: Place custom script here
		
		#	# Check to see if any issue rows are owned by $SearchAssignee_CDE
		#
		#	[string]$SQLCommand_STR = "
		#select
		#	top 1 assignee_cde
		#from
		#	issue_assignee
		#where
		#	assignee_cde = '$SearchAssignee_CDE'
		#	;"
		#
		#if ($Debug -eq 1)
		#{
		#	Write-Host $SQLCommand_STR
		#}
		#
		#	$ResultsDataTable_OBJ = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR $SQLCommand_STR
		#
		#if ($Debug -eq 1)
		#{
		#	Write-Host $ResultsDataTable_OBJ.assignee_cde
		#}
	
	
	
	
		#	if (<issue exists for assignee>)
		#	{
		#		[void][System.Windows.Forms.MessageBox]::Show("Assignee cannot be deleted because he/she owns an issue","Cannot Delete Assignee")
		#		
		#		return
		#	}
		
		$UserResponse_STR = [System.Windows.Forms.MessageBox]::Show("Do you really want to delete Assignee ${SearchAssignee_CDE}?","Confirm", "YesNo")
	
		if ($UserResponse_STR -eq "Yes")
		{
			[string]$SQLCommand_STR = "
delete from assignee
	where
		assignee_cde = '$SearchAssignee_CDE'
		;"
		
			if ($Debug -eq 1)
			{
				Write-Host $SQLCommand_STR
			}
		
			# Execute the SQL query
		
			$ResultsDataTable_OBJ = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR $SQLCommand_STR
		
			$formEditAssignee.Close()
		}
	}
	
	$buttonCancel_Click={
		#TODO: Place custom script here
		
		$formEditAssignee.Close()
	}
	
	$buttonSave_Click = {
		#TODO: Place custom script here
	
		<###############################################################
		#
		# Validate the form
		#
		###############################################################>
		
		# Initialize the validation failed variable
		$script:ValidationFailed = $false
		
		# Validate the form children controls
		$formEditAssignee.ValidateChildren()
		
		# Return if form validation failed
		if ($script:ValidationFailed)
		{
			return
		}
		
		<###############################################################
		#
		# Clean up data before inserting into or updating the database
		#
		# The returned data will be either be null or enclosed in single 
		# quotes, ready for SQL Server
		#
		###############################################################>
		
		# assignee_cde is generated--see below
		
		$replace_first_nme   = clean_up_field -EditType_SW Text -InputField_OBJ $($textboxFirst_NME.Text)
		$replace_last_nme    = clean_up_field -EditType_SW Text -InputField_OBJ $($textboxLast_NME.Text)
		$replace_user_nme    = clean_up_field -EditType_SW Text -InputField_OBJ $($textboxUser_NME.Text)
		$replace_email_adr   = clean_up_field -EditType_SW Text -InputField_OBJ $($textboxEmail_ADR.Text)
		$replace_comment_dsc = clean_up_field -EditType_SW Text -InputField_OBJ $($textboxComment_DSC.Text)
	
		switch ($SearchAssignee_CDE)
		{
			"!CREATE!"
			{
				# Build the primary key for the new row
	
				$InsertAssignee_CDE = $textboxFirst_NME.Text.Substring(0, 1) + $textboxLast_NME.Text
				
				# Insert a new row
				
				[string]$SQLCommand_STR = "
insert into assignee values
	(
		'$InsertAssignee_CDE',

		$replace_first_nme,
		$replace_last_nme,
		$replace_user_nme,
		$replace_email_adr,
		$replace_comment_dsc,

		getdate(),
		system_user
	);"
			
				if ($Debug_SW -eq 1)
				{
					Write-Host $SQLCommand_STR
				}
			}
			
			default
			{
				# Update an existing row
				
				[string]$SQLCommand_STR = "
update assignee
	set
		first_nme    = $replace_first_nme,
		last_nme     = $replace_last_nme,
		user_nme     = $replace_user_nme,
		email_adr    = $replace_email_adr,
		comment_dsc  = $replace_comment_dsc,

		mod_date     = getdate(),
		mod_user_id  = system_user
	where
		assignee_cde = '$SearchAssignee_CDE'
		;"
			
				if ($Debug_SW -eq 1)
				{
					Write-Host $SQLCommand_STR
				}
			}
		}
		
		if ($Debug -eq 1)
		{
			Write-Host $SQLCommand_STR
		}
		
		# Execute the SQL query
		
		$ResultsDataTable_OBJ = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR $SQLCommand_STR
		
		$formEditAssignee.Close()
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formEditAssignee.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ChildFormEditAssignee_textboxComment_DSC = $textboxComment_DSC.Text
		$script:ChildFormEditAssignee_textboxEmail_ADR = $textboxEmail_ADR.Text
		$script:ChildFormEditAssignee_textboxUser_NME = $textboxUser_NME.Text
		$script:ChildFormEditAssignee_textboxLast_NME = $textboxLast_NME.Text
		$script:ChildFormEditAssignee_textboxFirst_NME = $textboxFirst_NME.Text
		$script:ChildFormEditAssignee_textboxAssignee_CDE = $textboxAssignee_CDE.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxEmail_ADR.remove_Validating($textboxEmail_ADR_Validating)
			$textboxUser_NME.remove_Validating($textboxUser_NME_Validating)
			$textboxLast_NME.remove_Validating($textboxLast_NME_Validating)
			$textboxFirst_NME.remove_Validating($textboxFirst_NME_Validating)
			$buttonDelete.remove_Click($buttonDelete_Click)
			$buttonCancel.remove_Click($buttonCancel_Click)
			$buttonSave.remove_Click($buttonSave_Click)
			$formEditAssignee.remove_Load($formEditAssignee_Load)
			$formEditAssignee.remove_Load($Form_StateCorrection_Load)
			$formEditAssignee.remove_Closing($Form_StoreValues_Closing)
			$formEditAssignee.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formEditAssignee.SuspendLayout()
	#
	# formEditAssignee
	#
	$formEditAssignee.Controls.Add($labelIndicatesARequiredEn)
	$formEditAssignee.Controls.Add($textboxComment_DSC)
	$formEditAssignee.Controls.Add($labelComment)
	$formEditAssignee.Controls.Add($textboxEmail_ADR)
	$formEditAssignee.Controls.Add($textboxUser_NME)
	$formEditAssignee.Controls.Add($textboxLast_NME)
	$formEditAssignee.Controls.Add($textboxFirst_NME)
	$formEditAssignee.Controls.Add($textboxAssignee_CDE)
	$formEditAssignee.Controls.Add($buttonDelete)
	$formEditAssignee.Controls.Add($buttonCancel)
	$formEditAssignee.Controls.Add($buttonSave)
	$formEditAssignee.Controls.Add($labelEmailAddress)
	$formEditAssignee.Controls.Add($labelUsername)
	$formEditAssignee.Controls.Add($labelLastName)
	$formEditAssignee.Controls.Add($labelFirstName)
	$formEditAssignee.Controls.Add($labelAssigneeCode)
	$formEditAssignee.AcceptButton = $buttonSave
	$formEditAssignee.CancelButton = $buttonCancel
	$formEditAssignee.ClientSize = '460, 222'
	$formEditAssignee.Name = 'formEditAssignee'
	$formEditAssignee.Text = 'Edit Assignee'
	$formEditAssignee.add_Load($formEditAssignee_Load)
	#
	# labelIndicatesARequiredEn
	#
	$labelIndicatesARequiredEn.Location = '13, 187'
	$labelIndicatesARequiredEn.Name = 'labelIndicatesARequiredEn'
	$labelIndicatesARequiredEn.Size = '154, 23'
	$labelIndicatesARequiredEn.TabIndex = 10
	$labelIndicatesARequiredEn.Text = '* indicates a required entry'
	#
	# textboxComment_DSC
	#
	$textboxComment_DSC.Location = '120, 147'
	$textboxComment_DSC.Name = 'textboxComment_DSC'
	$textboxComment_DSC.Size = '332, 20'
	$textboxComment_DSC.TabIndex = 5
	#
	# labelComment
	#
	$labelComment.Location = '13, 147'
	$labelComment.Name = 'labelComment'
	$labelComment.Size = '100, 23'
	$labelComment.TabIndex = 9
	$labelComment.Text = 'Comment'
	#
	# textboxEmail_ADR
	#
	$textboxEmail_ADR.Location = '120, 121'
	$textboxEmail_ADR.Name = 'textboxEmail_ADR'
	$textboxEmail_ADR.Size = '332, 20'
	$textboxEmail_ADR.TabIndex = 4
	$textboxEmail_ADR.add_Validating($textboxEmail_ADR_Validating)
	#
	# textboxUser_NME
	#
	$textboxUser_NME.Location = '120, 94'
	$textboxUser_NME.Name = 'textboxUser_NME'
	$textboxUser_NME.Size = '170, 20'
	$textboxUser_NME.TabIndex = 3
	$textboxUser_NME.add_Validating($textboxUser_NME_Validating)
	#
	# textboxLast_NME
	#
	$textboxLast_NME.Location = '120, 67'
	$textboxLast_NME.Name = 'textboxLast_NME'
	$textboxLast_NME.Size = '170, 20'
	$textboxLast_NME.TabIndex = 2
	$textboxLast_NME.add_Validating($textboxLast_NME_Validating)
	#
	# textboxFirst_NME
	#
	$textboxFirst_NME.Location = '120, 40'
	$textboxFirst_NME.Name = 'textboxFirst_NME'
	$textboxFirst_NME.Size = '170, 20'
	$textboxFirst_NME.TabIndex = 1
	$textboxFirst_NME.add_Validating($textboxFirst_NME_Validating)
	#
	# textboxAssignee_CDE
	#
	$textboxAssignee_CDE.Location = '120, 13'
	$textboxAssignee_CDE.Name = 'textboxAssignee_CDE'
	$textboxAssignee_CDE.ReadOnly = $True
	$textboxAssignee_CDE.Size = '100, 20'
	$textboxAssignee_CDE.TabIndex = 0
	$textboxAssignee_CDE.TabStop = $False
	#
	# buttonDelete
	#
	$buttonDelete.Location = '216, 187'
	$buttonDelete.Name = 'buttonDelete'
	$buttonDelete.Size = '75, 23'
	$buttonDelete.TabIndex = 6
	$buttonDelete.Text = 'Delete'
	$buttonDelete.UseVisualStyleBackColor = $True
	$buttonDelete.add_Click($buttonDelete_Click)
	#
	# buttonCancel
	#
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '297, 187'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 7
	$buttonCancel.Text = 'Cancel'
	$buttonCancel.UseVisualStyleBackColor = $True
	$buttonCancel.add_Click($buttonCancel_Click)
	#
	# buttonSave
	#
	$buttonSave.Location = '378, 187'
	$buttonSave.Name = 'buttonSave'
	$buttonSave.Size = '75, 23'
	$buttonSave.TabIndex = 8
	$buttonSave.Text = 'Save'
	$buttonSave.UseVisualStyleBackColor = $True
	$buttonSave.add_Click($buttonSave_Click)
	#
	# labelEmailAddress
	#
	$labelEmailAddress.Location = '13, 121'
	$labelEmailAddress.Name = 'labelEmailAddress'
	$labelEmailAddress.Size = '100, 23'
	$labelEmailAddress.TabIndex = 4
	$labelEmailAddress.Text = '* Email Address'
	#
	# labelUsername
	#
	$labelUsername.Location = '13, 94'
	$labelUsername.Name = 'labelUsername'
	$labelUsername.Size = '100, 23'
	$labelUsername.TabIndex = 3
	$labelUsername.Text = '* Username'
	#
	# labelLastName
	#
	$labelLastName.Location = '13, 67'
	$labelLastName.Name = 'labelLastName'
	$labelLastName.Size = '100, 23'
	$labelLastName.TabIndex = 2
	$labelLastName.Text = '* Last Name'
	#
	# labelFirstName
	#
	$labelFirstName.Location = '13, 40'
	$labelFirstName.Name = 'labelFirstName'
	$labelFirstName.Size = '100, 23'
	$labelFirstName.TabIndex = 1
	$labelFirstName.Text = '* First Name'
	#
	# labelAssigneeCode
	#
	$labelAssigneeCode.Location = '13, 13'
	$labelAssigneeCode.Name = 'labelAssigneeCode'
	$labelAssigneeCode.Size = '100, 23'
	$labelAssigneeCode.TabIndex = 0
	$labelAssigneeCode.Text = 'Assignee Code'
	#
	# errorprovider1
	#
	$errorprovider1.ContainerControl = $formEditAssignee
	$formEditAssignee.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formEditAssignee.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formEditAssignee.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formEditAssignee.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formEditAssignee.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formEditAssignee.ShowDialog()

}
#endregion Source: ChildFormEditAssignee.psf

#region Source: ChildFormSearchForIssue.psf
function Call-ChildFormSearchForIssue_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
sxgAAB+LCAAAAAAABADVWVmP4kYQfo+U/9DyQ57QcGPQgqUZmElWO8cuQybJE2rbZehM243a7QHy
61N2wy7XDG0uaYWEsKnjq6qvqwrT7oMn3kDOe1RRgh9iJqKOVbGcX38hpP0k2YhFlN8xDo80BKc7
Zty/EzJ8Biq9MX76HMcJXE3ioF3cktY23H/BU0TNJ9CxnuexgvDqLxb5YhpfpZb0e4Hs+qpAXhaQ
alel9FUg3YSrREIngkRJygvka+Jy5n2B+UC8QtRxbZvWvXqj3KrWoNRsWSRCKB0rQHsPlEUW8dIY
JIpaXREpKXiso0WsX6WYgFTzhU6XRh7wm0QpES1lUKoPAaC+BwsxNxO4nTFlkeLSVHFp6z3bnEGk
ntl/YDlNu1Eg1UZlr1KaVctZhrJXfAAzZTm6VAS1SFasbbXbN4Sy0LkX1P/hYphetouZwFJ6f0F1
xs5eUp13rIaEePxRXbczcx15YyEt50agCSRfn43Gaisx23r3wqOKpWywS02sWbVkoKSrtobWQEtT
w64XSKVqID6g7ufIhxmyyUQ6Y4Y5mD9jeGFxQvmzmnO4od5rV/A0gQO5g1AblEKqe68bCRhmNzeY
VdTUMidaGsaNmJ2daQr9uGL2mIQuyKegjz6G3wb/HMe5ewjyUa5cKeWj3DuwDfT7QP2niM/fL/BO
tpZLiLBiAvAHXe3tfpSbB/fUBX52FvDUy2oyL13/ar7yb+HNWcd8badh3HY0JCICshNU/vJfdN50
JVAFjzDNhulhFBiIyUEzp47ToLy9Jnw8ctYB5+BAKzcHjKQzDmhQBFG9s5SccwatZ+SnHEV6qTuC
fWn3OYSDaRPKQcE1uMbca6REzzlHyvsogKntiWm0gWm4uH1s/S/ag46ufv66N+zaAb0nZ90P2HZN
EOmW8xsNJ5+MAZ2u2yx4dpIuk/5M/10y/4XB9Oxc89HZCJ29obM+xGgl78bDuZhiIuVAXPt+tjE5
d5THJt1+RbcHHBTkVF9l++rGdVDPqxRIzZz6O/J2lpUb0+KlAB+Ej17vEs4xR/qu8Ylr1jG2it06
/syt8V/wJIz+wIhAPogkhsWB2JGZ4W7Z9YOyYb4nkMAf2VwR+Kn6un6GdIkHGT1GuRjpfOE2lj3o
yreLNluHPP9IIzznOKgZj4PbbB6YwTndMEjj3zsK1i+u4xhCJBHES9nFnbkTxp6QnLknIGK7+N3q
phdN/Uv4OPnx2u8xnaiXcSTplEWjQ3yVqkE9sINy2a+XaJXu9/V3yC8SU1dIOL2j75ea8u3i6p8U
zv/93v44sxgAAA==#>
#endregion
param
(
	[string]$SearchStatusGroup_CDE  = "N/A",
	[string]$SearchStatus_CDE       = "N/A",
	[string]$SearchIssue_ID_STR     = "N/A",
	[string]$SearchWildCardText_STR = "N/A"
)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMain = New-Object 'System.Windows.Forms.Form'
	$buttonRefresh = New-Object 'System.Windows.Forms.Button'
	$textboxNumberOfRows_QTY = New-Object 'System.Windows.Forms.TextBox'
	$labelNumberOfRows = New-Object 'System.Windows.Forms.Label'
	$buttonCreateNewIssue = New-Object 'System.Windows.Forms.Button'
	$textboxSearch = New-Object 'System.Windows.Forms.TextBox'
	$buttonSearch = New-Object 'System.Windows.Forms.Button'
	$datagridviewResults = New-Object 'System.Windows.Forms.DataGridView'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	 # End of param
	
	#region Control Helper Functions
	function Load-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The ComboBox control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the ComboBox's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{	
				$array.Add($Item)	
			}
			$DataGridView.DataSource = $array
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($Table -eq $null)
		{
			$Table = New-Object System.Data.DataTable
		}
	
		if($InputObject-is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		else
		{
			if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
	
				if($InputObject -eq $null){ return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach($item in $InputObject)
				{
					if($item -ne $null)
					{
						$object = $item
						break	
					}
				}
	
				if($object -eq $null) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if($prop.Value -ne $null)
						{
							try{ $type = $prop.Value.GetType() } catch {}
						}
	
						if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
			      			[void]$table.Columns.Add($prop.Name, $type) 
						}
						else #Type info not found
						{ 
							[void]$table.Columns.Add($prop.Name) 	
						}
					}
			    }
				
				if($object -is [System.Data.DataRow])
				{
					foreach($item in $InputObject)
					{	
						$Table.Rows.Add($item)
					}
					return  @(,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()	
			}
			
			foreach($item in $InputObject)
			{		
				$row = $table.NewRow()
				
				if($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
	
		return @(,$Table)	
	}
	#endregion
	
	#region Search Function
	function SearchGrid()
	{
		$RowIndex = 0
		$ColumnIndex = 0
		$seachString = $textboxSearch.Text
		
		if($seachString -eq "")
		{
			return
		}
		
		if($datagridviewResults.SelectedCells.Count -ne 0)
		{
			$startCell = $datagridviewResults.SelectedCells[0];
			$RowIndex = $startCell.RowIndex
			$ColumnIndex = $startCell.ColumnIndex + 1
		}
		
		$columnCount = $datagridviewResults.ColumnCount
		$rowCount = $datagridviewResults.RowCount
		for(;$RowIndex -lt $rowCount; $RowIndex++)
		{
			$Row = $datagridviewResults.Rows[$RowIndex]
			
			for(;$ColumnIndex -lt $columnCount; $ColumnIndex++)
			{
				$cell = $Row.Cells[$ColumnIndex]
				
				if($cell.Value -ne $null -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
				{
					$datagridviewResults.CurrentCell = $cell
					return
				}
			}
			
			$ColumnIndex = 0
		}
		
		$datagridviewResults.CurrentCell = $null
		[void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.","String not Found")
		
	}
	#endregion
	
	function post_data_on_form
	{
		if ($Debug_SW -eq 1)
		{
			Write-Host "----------------------------------------"
			Write-Host "`$User_SW                = $User_SW"
			Write-Host "`$SearchStatusGroup_CDE  = $SearchStatusGroup_CDE"
			Write-Host "`$SearchStatus_CDE       = $SearchStatus_CDE"
			Write-Host "`$SearchIssue_ID_STR     = $SearchIssue_ID_STR"
			Write-Host "`$SearchWildCardText_STR = $SearchWildCardText_STR"
		}
	
		<###############################################################
		#
		# Define the base SQL statement
		#
		###############################################################>
	
		[string]$SQLCommand_STR = "
select
	i.assignee_cde,
	i.issue_id,
	i.status_cde,
	i.queue_order_nbr,
	i.status_dte,
	i.location_cde,
	i.customer_cde,
	i.short_dsc,
	substring(i.long_dsc, 1, 150) as long_dsc,
	i.create_dte,
	i.due_dte,
	i.internal_ticket_nbr,
	i.vendor_ticket_nbr,
	i.comment_dsc,
	i.mod_date,
	i.mod_user_id
from
	issue i
inner join status s on
	i.status_cde = s.status_cde
where
	1 = 1
" # End of $SQLCommand_STR
		
		<###############################################################
		#
		# Build the "where" clause
		#
		###############################################################>
	
		if ($SearchStatusGroup_CDE -ne "N/A")
			{
				<###############################################################
				#
				# Build the Status Group Code portion of "where" clause
				#
				###############################################################>
				
				$SQLCommand_STR = $SQLCommand_STR + "
and ('ALL' = '$User_SW' or i.assignee_cde = (select assignee_cde from assignee where user_nme = '$CurrentUser_NME'))
and ('ALL' = '$SearchStatusGroup_CDE' or s.status_group_cde = '$SearchStatusGroup_CDE')
" # End of $SQLCommand_STR
			}
			else
			{
				if ($SearchStatus_CDE -ne "N/A")
				{
					<###############################################################
					#
					# Build the Status Code portion of "where" clause
					#
					###############################################################>
	
					$SQLCommand_STR = $SQLCommand_STR + "
	and ('ALL' = '$User_SW' or i.assignee_cde = (select assignee_cde from assignee where user_nme = '$CurrentUser_NME'))
	and ('ALL' = '$SearchStatus_CDE' or s.status_cde = '$SearchStatus_CDE')
" # End of $SQLCommand_STR
				}
				else
				{
					if ($SearchIssue_ID_STR -ne "N/A")
					{
						<###############################################################
						#
						# Build the Issue ID portion of "where" clause
						#
						###############################################################>
	
						$SQLCommand_STR = $SQLCommand_STR + "
	and i.issue_id = $SearchIssue_ID_STR
" # End of $SQLCommand_STR
					}
					else
					{
						if ($SearchWildCardText_STR -ne "N/A")
						{
							<###############################################################
							#
							# Build the Wild Card Text portion of "where" clause
							#
							###############################################################>
						
							$SQLCommand_STR = $SQLCommand_STR + "
	and (
		i.short_dsc              like '%$SearchWildCardText_STR%'
		or i.long_dsc            like '%$SearchWildCardText_STR%'
		or i.internal_ticket_nbr like '%$SearchWildCardText_STR%'
		or i.vendor_ticket_nbr   like '%$SearchWildCardText_STR%'
		or i.progress_dsc        like '%$SearchWildCardText_STR%'
		or i.comment_dsc         like '%$SearchWildCardText_STR%'
		)
" # End of $SQLCommand_STR
						}
					}
				}
			}
			
		<###############################################################
		#
		# Build the "order by" clause
		#
		###############################################################>
	
		$SQLCommand_STR = $SQLCommand_STR + "
order by
	i.assignee_cde,
	case
		when i.queue_order_nbr is null then 99
		else                                queue_order_nbr
	end,
	i.status_cde desc,
	i.due_dte
	;" # End of $SQLCommand_STR
	
		if ($Debug_SW -eq 1)
		{
			Write-Host $SQLCommand_STR
		}
	
		<###############################################################
		#
		# Retrieve data from database
		#
		###############################################################>
	
		$dt = Get-Datatable $DatabaseConnection_STR $Database_NME $SQLCommand_STR
	
		<###############################################################
		#
		# Put data into datagridview
		#
		###############################################################>
	
		$datagridviewResults.DataSource = $dt.Tables[0]
	
		<###############################################################
		#
		# Set datagridview column attributes
		#
		###############################################################>
	
		$datagridviewResults.Columns[0].HeaderText = "Assignee";
		$datagridviewResults.Columns[0].Width = 80;
	
		$datagridviewResults.Columns[1].HeaderText = "ID";
		$datagridviewResults.Columns[1].Width = 40;
	
		$datagridviewResults.Columns[2].HeaderText = "Status Code";
		$datagridviewResults.Columns[2].Width = 80;
	
		$datagridviewResults.Columns[3].HeaderText = "Order";
		$datagridviewResults.Columns[3].Width = 35;
	
		$datagridviewResults.Columns[4].HeaderText = "Status Date";
		$datagridviewResults.Columns[4].Width = 110;
	
		$datagridviewResults.Columns[5].HeaderText = "Location";
		$datagridviewResults.Columns[5].Width = 60;
	
		$datagridviewResults.Columns[6].HeaderText = "Customer";
		$datagridviewResults.Columns[6].Width = 90;
	
		$datagridviewResults.Columns[7].HeaderText = "Short Description";
		$datagridviewResults.Columns[7].Width = 260;
	
		$datagridviewResults.Columns[8].HeaderText = "Long Description";
		$datagridviewResults.Columns[8].Width = 120;
	
		$datagridviewResults.Columns[9].HeaderText = "Create Date";
		$datagridviewResults.Columns[9].Width = 110;
	
		$datagridviewResults.Columns[10].HeaderText = "Due Date";
		$datagridviewResults.Columns[10].Width = 110;
	
		$datagridviewResults.Columns[11].HeaderText = "Internal Ticket";
		$datagridviewResults.Columns[11].Width = 85;
	
		$datagridviewResults.Columns[12].HeaderText = "Vendor Ticket";
		$datagridviewResults.Columns[12].Width = 85;
	
		$datagridviewResults.Columns[13].HeaderText = "Comment";
		$datagridviewResults.Columns[13].Width = 120;
	
		$datagridviewResults.Columns[14].HeaderText = "Row Modified Date";
		$datagridviewResults.Columns[14].Width = 110;
	
		$datagridviewResults.Columns[15].HeaderText = "Row Modified User";
		$datagridviewResults.Columns[15].Width = 110;
	
		# Display the row count
	
		$DataGridRowCount_QTY = $datagridviewResults.RowCount
	
		$textboxNumberOfRows_QTY.Text = "{0:N0}" -f $DataGridRowCount_QTY
	}
	
	$formMain_Load={
		#TODO: Initialize Form Controls here
	
		<###############################################################
		#
		# Display non-Production environment notification
		#
		###############################################################>
	
		display_nonproduction_environment
	
		post_data_on_form
	}
	
	$buttonSearch_Click={
		#TODO: Place custom script here
		SearchGrid
	}
	
	$buttonCreateNewIssue_Click={
		#TODO: Place custom script here
		
	#	$formMain.Hide()
		Call-ChildFormEditIssue_psf 0
	#	$formMain.Close()
	}
	
	$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		if($datagridviewResults.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewResults.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	$textboxSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		if($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
		{
			SearchGrid	
			$_.SuppressKeyPress = $true
		}
	}
	
	$buttonRefresh_Click={
		#TODO: Place custom script here
	
		$formMain.Hide()
		
		post_data_on_form
		
		$formMain.Show()
	}
	
	$buttonExit_Click={
		#TODO: Place custom script here
		
	        $formMain.Close()
	}
	
	$datagridviewResults_DoubleClick={
		#TODO: Place custom script here
		
		# See https://www.sapien.com/forums/viewtopic.php?t=9004
	
	#	[void][System.Windows.Forms.MessageBox]::Show($datagridviewResults.SelectedCells[0].FormattedValue, 'You Chose')
	
	#	Write-Host $datagridviewResults.SelectedCells[0].FormattedValue
	
	#	$formMain.Hide()
		Call-ChildFormEditIssue_psf $datagridviewResults.SelectedCells[1].FormattedValue # This is issue_id
	#	$formMain.Close()
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMain.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ChildFormSearchForIssue_textboxNumberOfRows_QTY = $textboxNumberOfRows_QTY.Text
		$script:ChildFormSearchForIssue_textboxSearch = $textboxSearch.Text
		$script:ChildFormSearchForIssue_datagridviewResults = $datagridviewResults.SelectedCells
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonRefresh.remove_Click($buttonRefresh_Click)
			$buttonCreateNewIssue.remove_Click($buttonCreateNewIssue_Click)
			$textboxSearch.remove_KeyDown($textboxSearch_KeyDown)
			$buttonSearch.remove_Click($buttonSearch_Click)
			$datagridviewResults.remove_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
			$datagridviewResults.remove_DoubleClick($datagridviewResults_DoubleClick)
			$buttonExit.remove_Click($buttonExit_Click)
			$formMain.remove_Load($formMain_Load)
			$formMain.remove_Load($Form_StateCorrection_Load)
			$formMain.remove_Closing($Form_StoreValues_Closing)
			$formMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMain.SuspendLayout()
	#
	# formMain
	#
	$formMain.Controls.Add($buttonRefresh)
	$formMain.Controls.Add($textboxNumberOfRows_QTY)
	$formMain.Controls.Add($labelNumberOfRows)
	$formMain.Controls.Add($buttonCreateNewIssue)
	$formMain.Controls.Add($textboxSearch)
	$formMain.Controls.Add($buttonSearch)
	$formMain.Controls.Add($datagridviewResults)
	$formMain.Controls.Add($buttonExit)
	$formMain.CancelButton = $buttonExit
	$formMain.ClientSize = '876, 362'
	$formMain.Name = 'formMain'
	$formMain.Text = 'Search for Issue'
	$formMain.add_Load($formMain_Load)
	#
	# buttonRefresh
	#
	$buttonRefresh.Anchor = 'Bottom, Right'
	$buttonRefresh.Location = '708, 330'
	$buttonRefresh.Name = 'buttonRefresh'
	$buttonRefresh.Size = '75, 23'
	$buttonRefresh.TabIndex = 8
	$buttonRefresh.Text = 'Refresh'
	$buttonRefresh.UseVisualStyleBackColor = $True
	$buttonRefresh.add_Click($buttonRefresh_Click)
	#
	# textboxNumberOfRows_QTY
	#
	$textboxNumberOfRows_QTY.Anchor = 'Bottom, Left'
	$textboxNumberOfRows_QTY.Location = '120, 330'
	$textboxNumberOfRows_QTY.Name = 'textboxNumberOfRows_QTY'
	$textboxNumberOfRows_QTY.ReadOnly = $True
	$textboxNumberOfRows_QTY.Size = '100, 20'
	$textboxNumberOfRows_QTY.TabIndex = 7
	#
	# labelNumberOfRows
	#
	$labelNumberOfRows.Anchor = 'Bottom, Left'
	$labelNumberOfRows.Location = '13, 330'
	$labelNumberOfRows.Name = 'labelNumberOfRows'
	$labelNumberOfRows.Size = '100, 23'
	$labelNumberOfRows.TabIndex = 6
	$labelNumberOfRows.Text = 'Number of Rows'
	#
	# buttonCreateNewIssue
	#
	$buttonCreateNewIssue.Anchor = 'Top, Right'
	$buttonCreateNewIssue.Location = '755, 12'
	$buttonCreateNewIssue.Name = 'buttonCreateNewIssue'
	$buttonCreateNewIssue.Size = '109, 23'
	$buttonCreateNewIssue.TabIndex = 3
	$buttonCreateNewIssue.Text = 'Create New Issue'
	$buttonCreateNewIssue.UseVisualStyleBackColor = $True
	$buttonCreateNewIssue.add_Click($buttonCreateNewIssue_Click)
	#
	# textboxSearch
	#
	$textboxSearch.Anchor = 'Top, Left, Right'
	$textboxSearch.Location = '13, 12'
	$textboxSearch.Name = 'textboxSearch'
	$textboxSearch.Size = '655, 20'
	$textboxSearch.TabIndex = 1
	$textboxSearch.add_KeyDown($textboxSearch_KeyDown)
	#
	# buttonSearch
	#
	$buttonSearch.Anchor = 'Top, Right'
	$buttonSearch.Location = '674, 12'
	$buttonSearch.Name = 'buttonSearch'
	$buttonSearch.Size = '75, 23'
	$buttonSearch.TabIndex = 2
	$buttonSearch.Text = '&Search'
	$buttonSearch.UseVisualStyleBackColor = $True
	$buttonSearch.add_Click($buttonSearch_Click)
	#
	# datagridviewResults
	#
	$datagridviewResults.AllowUserToAddRows = $False
	$datagridviewResults.AllowUserToDeleteRows = $False
	$datagridviewResults.Anchor = 'Top, Bottom, Left, Right'
	$datagridviewResults.Location = '12, 42'
	$datagridviewResults.Name = 'datagridviewResults'
	$datagridviewResults.ReadOnly = $True
	$datagridviewResults.SelectionMode = 'FullRowSelect'
	$datagridviewResults.Size = '852, 279'
	$datagridviewResults.TabIndex = 2
	$datagridviewResults.add_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
	$datagridviewResults.add_DoubleClick($datagridviewResults_DoubleClick)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.DialogResult = 'Cancel'
	$buttonExit.Location = '789, 330'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 4
	$buttonExit.Text = 'E&xit'
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	$formMain.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formMain.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formMain.ShowDialog()

}
#endregion Source: ChildFormSearchForIssue.psf

#region Source: ChildFormEditIssue.psf
function Call-ChildFormEditIssue_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
Wl0AAB+LCAAAAAAABADVXFtv4jgUfl9p/4PF4wi1BAgXqUWaQkeqtp3pQrezb8gEl3ob4q7jdMr+
+nVuJZAEjnMr0UijacfO+ezvfLbPOU4upsRgb4RvJlhgJP9hU2ZdNtqN0e+/IXTxg9MVtbD5jZrk
O16T0fiZmstvjK+vl1Tc2LZDzl7tp4vzWEO/++IfYggkNq/ksjHb2IKsz35Sa8l+2WfuQ/y/myjp
v5roMUDTPWu5f5po7JjC4eTSIo7g2Gyie2dhUuMPsnlgL8S6XPT7WDf0njbsdElrMGwgS0K5bDxF
8TaQ4Y6By/aNMbMEZ6btj1YCvufslXCxCTqOsWUQ88oRgllhG9lqSp6I7G+QoNnCa+A3bqDz8GHn
4dPSnm5SYokZ/Y80RlpLazdRT9OP9nJntzHaGdLRPg/kXTRGbnuU0uH6TUIJWt8yvNyzMHd/d3Hu
tQq7HCfXNXvF3kvnV0g7C/Yux7TixLbnk9n4EMvx+bllBhbU5VjraE3U6fdiMxTvdCfRUpNako0H
njCnadQloAX0nRlyCOYV5nIYcuIENbAJ6eZ516A3bKJB3LcSPAUvbqwleW+MOvE5kDL3OId7wC1e
ELN0/k3Xiuen4aRmpx/Kvs9l3DKYE60lR9zuqHHShzT3xO6BQqmo1KmsWMzXtpg43KNlfnfzPZ+e
9baqOvfMg1nt9iWpLSVStZoJLTI1d9TKTExbjZcE0+VKDbRa+vuqLc5QiAtJYGcFEDpm6wWrQm+G
a0h6/E/GXx4knvl4cq1GqosIC0Gt1bWFFyZZgjfErTv0NCkcDUKR7w5JqOH+0JHbYVtT84ek1tFT
0yM26RK7s5CMbr5tsHeQOmWxhyPIKnO9o8brjlEwob2BOp+g5cDT9xfkAkKJiGog7D8d4pAffEn4
/PvVtHppy/OUdIH+UFnbu8DBzuDu+IrOEMd20qLcTkxWWbaHQzVO9uyCyei31XdeEHeeMj1AKBnR
STMohyoDOEHsr1Pyr0M5WV5nP0l1m0gfKC6xSQDg+6feVWa1DfG1cL2lITqEEQ/wIblj8k39Apkp
sZnpeIFE3rxEdwg5L+fMS+ziPcXMhDaol9i3M5onLQEjPyLxrdlSA6V2nI00YR9AdPIylse2tVyB
8mu4B88uxU2r6Uo1ERHPLp20roJ5ySUqBTaiNstVFASTr6g0OCcvp0ciH88fqPFChHpYsp/fAx0u
7vD7LbFW4rkx6kKEsaPBfbwKZyVNXYgJVaBTFmJ0cnJl3kE8RtQYNVyuJLtgSfqYUAqokxfmjSUI
t7BZlDRboFJaHmnGEZcrzrgrnLQ4d6cnlzxBXO4EmVHT5QoUcjgOKmMBquIkWnlKbyxj4xXjm8/J
1XvCbg8gaZrdhF4UtkKyvqucz0tOOB/L1kfh1TNbH45gzJaZM/au0lXIjRkuV+egxTpII4WoUCIs
dSYn8nkPdE3u3YWDl06pdD8ipLlXz9zEIfPJQya5yzjBsQVbZ1C5Dl/yE+FCnOGZ/Ro/E+NFrqDg
1SjwoF5bff+O7xQnrWk5ka7f5ZKzAotRm6UqOSGLl6ZkCQcl4qnDVu0pj/DP2aoHbqY+Q1k9ihru
Bd2e8k6dGFcd3agj6Gq6UQcjyKrq/kBTL6uHRuFldV395AW/NiP35zRANdD1PaeMU/FJR/Buv5VJ
11HUcDdoKbtBYjR2TNZRcPWUdTiCrLLutobqsg6NgvnUiwqoUmSdCqgGsg65+BxZdzLegouihpeI
1O/JJLY+JusouHrK+oOgrLdtuhlkHXaHL9Md9VgIftXmC0oFVANZf7VturLIJ11u9UPpDjyznQS7
3IRZJmVH4RWo7Mq9YyawcOxP9I0styO3oEv1jMQo/ZhjbLEV6Bafmn0LRqScgPtwjG/YtCGekTtj
14JEYEkZu+0Qy82/xZvXzBfGnMifa+ALmg4pWyf5wnaIpfpCEReOKq6P3zJrlfsSWA/CS857nCHQ
U7zBWcQbbxXzPntmvIDbfxB9RG5DaC3l6xAfQEu9K5jId9qxYB9ZgYeCqm/HeC/D30xyOYFCJLhn
FtBvSvDyh2VuVCtpXgVHzQeArWeCvabteScd9ofhTe5qukLkFzNcag0O/k5GCKmoUnqFNPrn2tw1
VIVz9Z7ZUimEV1F9QEUVUisnMK8Kld9225otlUD4Jx2+oIDC+mnQjyfyalAlntkzWyqFCvf1PUA1
1KAbTUyIbXD6mvdFJlDws5MI3zFdKpPw6rWLCh2CddJ0ekfxgvhUuLGdaLtUQuH39uXq6gKrL6de
kJAnNFGvUQUmS2UQXnn2P3mUAEedNv+Tb6Xz5n84bkJMkn1j7PcU3/+OGgUz19fVL/jBowswmL9s
8khtB8vD2cYkV9h4GTOT8fRgN5qSGEtKXnbHP/d+lzcJUam3hJ8ZVPGWCcUmW02JLS3LQ4j3BLV7
hF09i5OBLWV2MoX74GAwxTmZb7KGTjbDb5kXpGG7l8VXXJOlegr8rgMQSnF+4ho86iW7Pxx3mGvO
GZcg3uiyghIZca29Bta01A+qSj/C1CI8cKgDH1Xd+2hryldVVSel4nyxpvK12b00sd5JeNNwr8ux
GtHBrHJcEJkKQweKCsO4RA8c9PbDaFVuKzxrZ+YVRmvkiA0g6eDR+sB8J1RfE5fD1M927BL01bbJ
Wk4hscOnBb/ZjNa2wbhJFwXQcHH+8dR9Kz7xVdgo3LmOW3S/z12NIY5/UWuVxVar86Q/9Z80bam3
cAcft/X32qxkTGPGSfGGPn70Xf7iPPot9dH/mZhEb1pdAAA=#>
#endregion
param
	(
	[int]$SearchIssue_ID # A value of zero indicates that a new row should be created
	)

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formEditIssue = New-Object 'System.Windows.Forms.Form'
	$textboxProgress_DSC = New-Object 'System.Windows.Forms.TextBox'
	$labelIssueProgress = New-Object 'System.Windows.Forms.Label'
	$textboxEstDuration_MIN = New-Object 'System.Windows.Forms.TextBox'
	$labelEstDurationMin = New-Object 'System.Windows.Forms.Label'
	$comboboxWorkType_CDE = New-Object 'System.Windows.Forms.ComboBox'
	$labelWorkType = New-Object 'System.Windows.Forms.Label'
	$comboboxQueueOrder_NBR = New-Object 'System.Windows.Forms.ComboBox'
	$labelQueueOrder = New-Object 'System.Windows.Forms.Label'
	$labelIndicatesARequiredEn = New-Object 'System.Windows.Forms.Label'
	$textboxResolution_DSC = New-Object 'System.Windows.Forms.TextBox'
	$labelResolution = New-Object 'System.Windows.Forms.Label'
	$textboxComment_DSC = New-Object 'System.Windows.Forms.TextBox'
	$labelComment = New-Object 'System.Windows.Forms.Label'
	$textboxVendorTicket_NBR = New-Object 'System.Windows.Forms.TextBox'
	$labelVendorTicket = New-Object 'System.Windows.Forms.Label'
	$textboxInternalTicket_NBR = New-Object 'System.Windows.Forms.TextBox'
	$labelInternalTicket = New-Object 'System.Windows.Forms.Label'
	$comboboxCategory_CDE = New-Object 'System.Windows.Forms.ComboBox'
	$labelCategoryCode = New-Object 'System.Windows.Forms.Label'
	$datetimepickerDue_DTE = New-Object 'System.Windows.Forms.DateTimePicker'
	$labelDueDate = New-Object 'System.Windows.Forms.Label'
	$comboboxCustomer_CDE = New-Object 'System.Windows.Forms.ComboBox'
	$labelCustomer = New-Object 'System.Windows.Forms.Label'
	$comboboxPriority_CDE = New-Object 'System.Windows.Forms.ComboBox'
	$labelPriority = New-Object 'System.Windows.Forms.Label'
	$comboboxLocation_CDE = New-Object 'System.Windows.Forms.ComboBox'
	$labelLocation = New-Object 'System.Windows.Forms.Label'
	$comboboxAssignee_CDE = New-Object 'System.Windows.Forms.ComboBox'
	$comboboxStatus_CDE = New-Object 'System.Windows.Forms.ComboBox'
	$datetimepickerStatus_DTE = New-Object 'System.Windows.Forms.DateTimePicker'
	$datetimepickerCreate_DTE = New-Object 'System.Windows.Forms.DateTimePicker'
	$textboxLong_DSC = New-Object 'System.Windows.Forms.TextBox'
	$textboxShort_DSC = New-Object 'System.Windows.Forms.TextBox'
	$textboxIssue_ID = New-Object 'System.Windows.Forms.TextBox'
	$labelAssigneeCode = New-Object 'System.Windows.Forms.Label'
	$labelStatusDate = New-Object 'System.Windows.Forms.Label'
	$labelStatusCode = New-Object 'System.Windows.Forms.Label'
	$labelCreateDate = New-Object 'System.Windows.Forms.Label'
	$labelLongDescription = New-Object 'System.Windows.Forms.Label'
	$labelShortDescription = New-Object 'System.Windows.Forms.Label'
	$labelIssueID = New-Object 'System.Windows.Forms.Label'
	$buttonDelete = New-Object 'System.Windows.Forms.Button'
	$buttonCancel = New-Object 'System.Windows.Forms.Button'
	$buttonSave = New-Object 'System.Windows.Forms.Button'
	$errorprovider1 = New-Object 'System.Windows.Forms.ErrorProvider'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$label1 = New-Object 'System.Windows.Forms.Label'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	 # End of param
	
	#region Control Helper Functions
	function Load-ComboBox 
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
	
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
	
		.PARAMETER  ComboBox
			The ComboBox control you want to add items to.
	
		.PARAMETER  Items
			The object or objects you wish to load into the ComboBox's Items collection.
	
		.PARAMETER  DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER  Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Load-ComboBox $combobox1 "Red" -Append
			Load-ComboBox $combobox1 "White" -Append
			Load-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Load-ComboBox $combobox1 (Get-Process) "ProcessName"
	#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Items,
		    [Parameter(Mandatory=$false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if(-not $Append)
		{
			$ComboBox.Items.Clear()	
		}
		
		if($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [Array])
		{
			$ComboBox.BeginUpdate()
			foreach($obj in $Items)
			{
				$ComboBox.Items.Add($obj)	
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)	
		}
	
		$ComboBox.DisplayMember = $DisplayMember	
	}
	#endregion
	
	$formEditIssue_Load={
		#TODO: Initialize Form Controls here
		
		<###############################################################
		#
		# Display non-Production environment notification
		#
		###############################################################>
	
		display_nonproduction_environment
	
		if ($SearchIssue_ID -eq 0)
		{
			# User is creating a new row
			
			# Disable the Delete button when a new row is being created
			
			$buttonDelete.Enabled = $false
		} else {
			# User is reading for an existing row
	
			# Define SQL statement
	
			[string]$SQLCommand_STR = "
select
	issue_id,
	location_cde,
	priority_cde,
	queue_order_nbr,
	customer_cde,
	work_type_cde,
	short_dsc,
	long_dsc,
	create_dte,
	status_cde,
	status_dte,
	est_duration_min,
	assignee_cde,
	due_dte,
	category_cde,
	internal_ticket_nbr,
	vendor_ticket_nbr,
	progress_dsc,
	comment_dsc,
	resolution_dsc
from
	issue
where
	issue_id = $SearchIssue_ID
	;"
	
			if ($Debug_SW -eq 1)
			{
				Write-Host $SQLCommand_STR
			}
	
			# Create an object for the data returned from SQL Server
	
			$ResultsDataTable_OBJ = New-Object System.Data.DataTable
	
			# Execute the SQL query
	
			$ResultsDataTable_OBJ = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR $SQLCommand_STR
	
			<###############################################################
			#
			# Check to see if the database read was successful
			#
			###############################################################>
	
			if ($SearchIssue_ID -ne $ResultsDataTable_OBJ.issue_id)
			{
				$UserResponse_STR = [System.Windows.Forms.MessageBox]::Show("Issue ID $SearchIssue_ID was not found","Data not Found", "OK")
	
				$formEditIssue.Close()
			}
		}
	
		<###############################################################
		#
		# Place data onto the form
		#
		###############################################################>
	
		$textboxIssue_ID.Text  = $ResultsDataTable_OBJ.issue_id
	
		# Populate Location Code combobox
	
		Load-ComboBox $comboboxLocation_CDE $LocationCode_ARY.location_cde
	
		# Select the matching value for the Location Code combobox
	
		$comboboxLocation_CDE.SelectedIndex = $comboboxLocation_CDE.FindStringExact($ResultsDataTable_OBJ.location_cde)
	
		# Populate Priority Code combobox
	
		Load-ComboBox $comboboxPriority_CDE $PriorityCode_ARY.priority_cde
	
		# Select the matching value for the Priority Code combobox
	
		$comboboxPriority_CDE.SelectedIndex = $comboboxPriority_CDE.FindStringExact($ResultsDataTable_OBJ.priority_cde)
		
		# Populate Work Type combobox
	
		Load-ComboBox $comboboxWorkType_CDE $WorkTypeCode_ARY.work_type_cde
	
		# Select the matching value for the Work Type combobox
	
		$comboboxWorkType_CDE.SelectedIndex = $comboboxWorkType_CDE.FindStringExact($ResultsDataTable_OBJ.work_type_cde)
		
		# Populate Customer Code combobox
	
		Load-ComboBox $comboboxCustomer_CDE $CustomerCode_ARY.customer_cde
	
		# Select the matching value for the Customer Code combobox
	
		$comboboxCustomer_CDE.SelectedIndex = $comboboxCustomer_CDE.FindStringExact($ResultsDataTable_OBJ.customer_cde)
		
		$textboxShort_DSC.Text = $ResultsDataTable_OBJ.short_dsc
	
		$textboxLong_DSC.Text  = $ResultsDataTable_OBJ.long_dsc
	
		# Create a custom format for Create Date
	
		$datetimepickerCreate_DTE.CustomFormat = "MM/dd/yyyy HH:mm:ss";
	
		if ($SearchIssue_ID -eq 0)
		{
			# User is creating a new row
		} else {
			# User is reading for an existing row
	
			$datetimepickerCreate_DTE.Value = $ResultsDataTable_OBJ.create_dte
		}
	
		# Populate Status Code combobox
	
		Load-ComboBox $comboboxStatus_CDE $StatusCode_ARY.status_cde
	
		# Select the matching value for the Status Code combobox
	
		if ($SearchIssue_ID -eq 0)
		{
			# User is creating a new row
	
			$comboboxStatus_CDE.SelectedIndex = $comboboxStatus_CDE.FindStringExact('Assigned')
		} else {
			# User is reading for an existing row
	
			$comboboxStatus_CDE.SelectedIndex = $comboboxStatus_CDE.FindStringExact($ResultsDataTable_OBJ.status_cde)
		}
	
		# Populate Queue Order combobox
	
		Load-ComboBox $comboboxQueueOrder_NBR $QueueOrder_ARY.queue_order_nbr
	
		# Select the matching value for the Queue Order combobox
	
		$comboboxQueueOrder_NBR.SelectedIndex = $comboboxQueueOrder_NBR.FindStringExact($ResultsDataTable_OBJ.queue_order_nbr)
	
		# Create a custom format for Status Date
	
		$datetimepickerStatus_DTE.CustomFormat = "MM/dd/yyyy HH:mm:ss";
	
		if ($SearchIssue_ID -eq 0)
		{
			# User is creating a new row
		} else {
			# User is reading for an existing row
	
			$datetimepickerStatus_DTE.Value = $ResultsDataTable_OBJ.status_dte
		}
	
		# Populate Assignee Code combobox
	
		Load-ComboBox $comboboxAssignee_CDE $AssigneeCode_ARY.assignee_cde
	
		# Select the matching value for the Assignee Code combobox
	
		if ($SearchIssue_ID -eq 0)
		{
			# User is creating a new row
			
			$comboboxAssignee_CDE.SelectedIndex = $comboboxAssignee_CDE.FindStringExact($CurrentAssignee_CDE)
		} else {
			# User is reading for an existing row
	
			$comboboxAssignee_CDE.SelectedIndex = $comboboxAssignee_CDE.FindStringExact($ResultsDataTable_OBJ.assignee_cde)
		}
	
		# Create a custom format for Due Date
	
		$datetimepickerDue_DTE.CustomFormat = "MM/dd/yyyy HH:mm:ss";
	
		if ($SearchIssue_ID -eq 0)
		{
			# User is creating a new row
			
			$datetimepickerDue_DTE.Checked = $false
		} else {
			# User is reading for an existing row
	
	#		Write-Output "`$ResultsDataTable_OBJ.issue_id = $($ResultsDataTable_OBJ.issue_id)*" > temp.txt
	#		$($ResultsDataTable_OBJ.due_dte).GetType() >> temp.txt
	
			if ($($ResultsDataTable_OBJ.due_dte).GetType().Name -eq "DBNull")
			{
				# A null date came from the database
				
				Write-Output "DBNull" >> temp.txt
	
				$datetimepickerDue_DTE.Checked = $false
			} else {
				# A non-null date came from the database (the data type should be DateTime)
	
				Write-Output "Not DBNull" >> temp.txt
	
				$datetimepickerDue_DTE.Checked = $true
				$datetimepickerDue_DTE.Value   = $ResultsDataTable_OBJ.due_dte
			}
	
	#		notepad temp.txt
		}
		# Populate Category Code combobox
	
		Load-ComboBox $comboboxCategory_CDE $CategoryCode_ARY.category_cde
	
		# Select the matching value for the Assignee Code combobox
	
		$comboboxCategory_CDE.SelectedIndex = $comboboxCategory_CDE.FindStringExact($ResultsDataTable_OBJ.category_cde)
	
		$textboxInternalTicket_NBR.Text  = $ResultsDataTable_OBJ.internal_ticket_nbr
		$textboxVendorTicket_NBR.Text    = $ResultsDataTable_OBJ.vendor_ticket_nbr
		$textboxEstDuration_MIN.Text     = $ResultsDataTable_OBJ.est_duration_min
		$textboxProgress_DSC.Text        = $ResultsDataTable_OBJ.progress_dsc
		$textboxComment_DSC.Text         = $ResultsDataTable_OBJ.comment_dsc
		$textboxResolution_DSC.Text      = $ResultsDataTable_OBJ.resolution_dsc
	}
	
	$comboboxLocation_CDE_Validating = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
	
		# Configure ErrorProvider
	
		$errorprovider1.SetIconAlignment($comboboxLocation_CDE, [System.Windows.Forms.ErrorIconAlignment]::MiddleLeft)
		$errorprovider1.SetIconPadding($comboboxLocation_CDE, 1)
	
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$Result_CDE = Validate-IsEmptyTrim $comboboxLocation_CDE.SelectedItem
	
		if ($Result_CDE -eq $true)
		{
			$script:ValidationFailed = $true
			$errorprovider1.SetError($this, "Location cannot be blank");
		}
		else
		{
			$errorprovider1.SetError($this, "");
		}
	}
	
	$comboboxPriority_CDE_Validating = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
	
		# Configure ErrorProvider
	
		$errorprovider1.SetIconAlignment($comboboxPriority_CDE, [System.Windows.Forms.ErrorIconAlignment]::MiddleLeft)
		$errorprovider1.SetIconPadding($comboboxPriority_CDE, 1)
	
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$Result_CDE = Validate-IsEmptyTrim $comboboxPriority_CDE.SelectedItem
	
		if ($Result_CDE -eq $true)
		{
			$script:ValidationFailed = $true
			$errorprovider1.SetError($this, "Priority cannot be blank");
		}
		else
		{
			$errorprovider1.SetError($this, "");
		}
	}
	
	$comboboxWorkType_CDE_Validating = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
	
		# Configure ErrorProvider
	
		$errorprovider1.SetIconAlignment($comboboxWorkType_CDE, [System.Windows.Forms.ErrorIconAlignment]::MiddleLeft)
		$errorprovider1.SetIconPadding($comboboxWorkType_CDE, 1)
	
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$Result_CDE = Validate-IsEmptyTrim $comboboxWorkType_CDE.SelectedItem
	
		if ($Result_CDE -eq $true)
		{
			$script:ValidationFailed = $true
			$errorprovider1.SetError($this, "Work Type cannot be blank");
		}
		else
		{
			$errorprovider1.SetError($this, "");
		}
	}
	
	$comboboxCustomer_CDE_Validating = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
	
		# Configure ErrorProvider
	
		$errorprovider1.SetIconAlignment($comboboxCustomer_CDE, [System.Windows.Forms.ErrorIconAlignment]::MiddleLeft)
		$errorprovider1.SetIconPadding($comboboxCustomer_CDE, 1)
	
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$Result_CDE = Validate-IsEmptyTrim $comboboxCustomer_CDE.SelectedItem
	
		if ($Result_CDE -eq $true)
		{
			$script:ValidationFailed = $true
			$errorprovider1.SetError($this, "Customer cannot be blank");
		}
		else
		{
			$errorprovider1.SetError($this, "");
		}
	}
	
	$textboxShort_DSC_Validating = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
	
		# Configure ErrorProvider
	
		$errorprovider1.SetIconAlignment($textboxShort_DSC, [System.Windows.Forms.ErrorIconAlignment]::MiddleLeft)
		$errorprovider1.SetIconPadding($textboxShort_DSC, 1)
	
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$Result_CDE = Validate-IsEmptyTrim $textboxShort_DSC.Text
	
		if ($Result_CDE -eq $true)
		{
			$script:ValidationFailed = $true
			$errorprovider1.SetError($this, "Short Description cannot be blank");
		}
		else
		{
			$errorprovider1.SetError($this, "");
		}
	}
	
	$comboboxStatus_CDE_Validating = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
	
		# Configure ErrorProvider
	
		$errorprovider1.SetIconAlignment($comboboxStatus_CDE, [System.Windows.Forms.ErrorIconAlignment]::MiddleLeft)
		$errorprovider1.SetIconPadding($comboboxStatus_CDE, 1)
	
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$Result_CDE = Validate-IsEmptyTrim $comboboxStatus_CDE.SelectedItem
	
		if ($Result_CDE -eq $true)
		{
			$script:ValidationFailed = $true
			$errorprovider1.SetError($this, "Status Code cannot be blank");
		}
		else
		{
			$errorprovider1.SetError($this, "");
		}
	}
	
	$comboboxAssignee_CDE_Validating = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
		
		# Configure ErrorProvider
		
		$errorprovider1.SetIconAlignment($comboboxAssignee_CDE, [System.Windows.Forms.ErrorIconAlignment]::MiddleLeft)
		$errorprovider1.SetIconPadding($comboboxAssignee_CDE, 1)
		
		if ($comboboxAssignee_CDE.Text -eq "" -and $comboboxStatus_CDE.Text -eq "Assigned")
		{
			$script:ValidationFailed = $true
			$errorprovider1.SetError($this, "Assignee cannot be blank when Status Code is Assigned");
		}
		else
		{
			$errorprovider1.SetError($this, "");
		}
	}
	
	$comboboxCategory_CDE_Validating = [System.ComponentModel.CancelEventHandler]{
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		#TODO: Place custom script here
	
		# Configure ErrorProvider
	
		$errorprovider1.SetIconAlignment($comboboxCategory_CDE, [System.Windows.Forms.ErrorIconAlignment]::MiddleLeft)
		$errorprovider1.SetIconPadding($comboboxCategory_CDE, 1)
	
		#Event Argument: $_ = [System.ComponentModel.CancelEventArgs]
		$Result_CDE = Validate-IsEmptyTrim $comboboxCategory_CDE.SelectedItem
	
		if ($Result_CDE -eq $true)
		{
			$script:ValidationFailed = $true
			$errorprovider1.SetError($this, "Category Code cannot be blank");
		}
		else
		{
			$errorprovider1.SetError($this, "");
		}
	}
	
	$buttonDelete_Click={
		#TODO: Place custom script here
	
		$UserResponse_STR = [System.Windows.Forms.MessageBox]::Show("Do you really want to delete Issue ${SearchIssue_ID}?","Confirm", "YesNo")
	
		if ($UserResponse_STR -eq "Yes")
		{
			[string]$SQLCommand_STR = "
delete from issue
	where
		issue_id = $SearchIssue_ID
		;"
	
			if ($Debug_SW -eq 1)
		        {
		                Write-Host $SQLCommand_STR
		        }
	
			# Execute the SQL query
	
			$ResultsDataTable_OBJ = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR $SQLCommand_STR
	
			$formEditIssue.Close()
		}
	}
	
	$buttonCancel_Click={
		#TODO: Place custom script here
		
		$formEditIssue.Close()
	}
	
	$buttonSave_Click={
		#TODO: Place custom script here
	
		<###############################################################
		#
		# Validate the form
		#
		###############################################################>
	
		# Initialize the validation failed variable
		$script:ValidationFailed = $false
	
		# Validate the form children controls
		$formEditIssue.ValidateChildren()
	
		# Return if form validation failed
		if ($script:ValidationFailed)
		{
			return
		}
	
		<###############################################################
		#
		# Clean up data before inserting into or updating the database
		#
		# The returned data will be either be null or enclosed in single 
		# quotes, ready for SQL Server
		#
		###############################################################>
	
		if ($comboboxLocation_CDE.Text -ne '')
		{
			$replace_location_cde = clean_up_field -EditType_SW Text -InputField_OBJ $($comboboxLocation_CDE.SelectedItem)
		} else {
			$replace_location_cde = "null"
		}
		
		if ($comboboxPriority_CDE.Text -ne '')
		{
			$replace_priority_cde = clean_up_field -EditType_SW Text -InputField_OBJ $($comboboxPriority_CDE.SelectedItem)
		} else {
			$replace_priority_cde = "null"
		}
		
		if ($comboboxWorkType_CDE.Text -ne '')
		{
			$replace_work_type_cde = clean_up_field -EditType_SW Text -InputField_OBJ $($comboboxWorkType_CDE.SelectedItem)
		} else {
			$replace_work_type_cde = "null"
		}
		
		if ($comboboxCustomer_CDE.Text -ne '')
		{
			$replace_customer_cde = clean_up_field -EditType_SW Text -InputField_OBJ $($comboboxCustomer_CDE.SelectedItem)
		} else {
			$replace_customer_cde = "null"
		}
		
		$replace_short_dsc = clean_up_field -EditType_SW Text -InputField_OBJ $($textboxShort_DSC.Text)
		
		$replace_long_dsc = clean_up_field -EditType_SW Text -InputField_OBJ $($textboxLong_DSC.Text)
		
		if ($SearchIssue_ID -ne 0)
		{
			$replace_create_dte = clean_up_field -EditType_SW DateTime -InputField_OBJ $($datetimepickerCreate_DTE.Value)
		} else {
			$replace_create_dte = "getdate()"
		}
		
		if ($comboboxStatus_CDE.Text -ne '')
		{
			$replace_status_cde = clean_up_field -EditType_SW Text -InputField_OBJ $($comboboxStatus_CDE.SelectedItem)
		} else {
			$replace_status_cde = "null"
		}
		
		# Queue Order should be black unless Status Code is "Implementation"
		
		if ($comboboxStatus_CDE.Text -ne 'Implementation')
		{
			$comboboxQueueOrder_NBR.Text = ''
		}
		
		if ($comboboxQueueOrder_NBR.Text -ne '')
		{
			$replace_queue_order_nbr = clean_up_field -EditType_SW Number -InputField_OBJ $($comboboxQueueOrder_NBR.SelectedItem)
		} else {
			$replace_queue_order_nbr = "null"
		}
		
		$replace_status_dte = "getdate()"
		
		if ($comboboxAssignee_CDE.Text -ne '')
		{
			$replace_assignee_cde = clean_up_field -EditType_SW Text -InputField_OBJ $($comboboxAssignee_CDE.SelectedItem)
		} else {
			$replace_assignee_cde = "null"
		}
		
		#	$datetimepickerDue_DTE | Format-List * > temp.txt
		
		if ($datetimepickerDue_DTE.Checked -eq $true)
		{
			$replace_due_dte = clean_up_field -EditType_SW DateTime -InputField_OBJ $($datetimepickerDue_DTE.Value)
		} else {
			$replace_due_dte = "null"
		}
		
		#	Write-Output "`$replace_due_dte = $replace_due_dte" >> temp.txt
		#	notepad temp.txt
		
		if ($comboboxCategory_CDE.Text -ne '')
		{
			$replace_category_cde = clean_up_field -EditType_SW Text -InputField_OBJ $($comboboxCategory_CDE.SelectedItem)
		} else {
			$replace_category_cde = "null"
		}
		
		$replace_internal_ticket_nbr = clean_up_field -EditType_SW Text -InputField_OBJ $($textboxInternalTicket_NBR.Text)
		$replace_vendor_ticket_nbr = clean_up_field -EditType_SW Text -InputField_OBJ $($textboxVendorTicket_NBR.Text)
		$replace_est_duration_min = clean_up_field -EditType_SW Number -InputField_OBJ $($textboxEstDuration_MIN.Text)
		$replace_progress_dsc = clean_up_field -EditType_SW Text -InputField_OBJ $($textboxProgress_DSC.Text)
		$replace_comment_dsc = clean_up_field -EditType_SW Text -InputField_OBJ $($textboxComment_DSC.Text)
		$replace_resolution_dsc = clean_up_field -EditType_SW Text -InputField_OBJ $($textboxResolution_DSC.Text)
	
		<###############################################################
		#
		# Insert or update data
		#
		###############################################################>
	
		switch ($SearchIssue_ID)
		{
			0
			{
				# Insert a new row
	
				[string]$SQLCommand_STR = "
insert into issue values
	(
		next value for issue_seq,

		$replace_location_cde,
		$replace_priority_cde,
		$replace_queue_order_nbr,
		$replace_customer_cde,
		$replace_work_type_cde,
		$replace_short_dsc,
		$replace_long_dsc,
		$replace_create_dte,
		$replace_status_cde,
		$replace_status_dte,
		$replace_est_duration_min,
		$replace_assignee_cde,
		$replace_due_dte,
		$replace_category_cde,
		$replace_internal_ticket_nbr,
		$replace_vendor_ticket_nbr,
		$replace_progress_dsc,
		$replace_comment_dsc,
		$replace_resolution_dsc,

		getdate(),
		system_user
	);"
			}
	
			default
			{
				# Update an existing row
	
				[string]$SQLCommand_STR = "
update issue
	set
--		issue_id (Column based on a sequence)

		location_cde        = $replace_location_cde,
		priority_cde        = $replace_priority_cde,
		queue_order_nbr     = $replace_queue_order_nbr,
		customer_cde        = $replace_customer_cde,
		work_type_cde       = $replace_work_type_cde,
		short_dsc           = $replace_short_dsc,
		long_dsc            = $replace_long_dsc,
		create_dte          = $replace_create_dte,
		status_cde          = $replace_status_cde,
		status_dte          = $replace_status_dte,
		est_duration_min    = $replace_est_duration_min,
		assignee_cde        = $replace_assignee_cde,
		due_dte             = $replace_due_dte,
		category_cde        = $replace_category_cde,
		internal_ticket_nbr = $replace_internal_ticket_nbr,
		vendor_ticket_nbr   = $replace_vendor_ticket_nbr,
		progress_dsc        = $replace_progress_dsc,
		comment_dsc         = $replace_comment_dsc,
		resolution_dsc      = $replace_resolution_dsc,

		mod_date            = getdate(),
		mod_user_id         = system_user
	where
		issue_id            = $SearchIssue_ID
		;"
			}
		}
	
		if ($Debug_SW -eq 1)
		{
			Write-Host $SQLCommand_STR
		}
	
		# Execute the SQL query
	
		$ResultsDataTable_OBJ = ExecuteDbDataReaderSqlQuery -DatabaseConnection_STR $DatabaseConnection_STR -Database_NME $Database_NME -SQLCommand_STR $SQLCommand_STR
	
		$formEditIssue.Close()	
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formEditIssue.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ChildFormEditIssue_textboxProgress_DSC = $textboxProgress_DSC.Text
		$script:ChildFormEditIssue_textboxEstDuration_MIN = $textboxEstDuration_MIN.Text
		$script:ChildFormEditIssue_comboboxWorkType_CDE = $comboboxWorkType_CDE.Text
		$script:ChildFormEditIssue_comboboxWorkType_CDE_SelectedItem = $comboboxWorkType_CDE.SelectedItem
		$script:ChildFormEditIssue_comboboxQueueOrder_NBR = $comboboxQueueOrder_NBR.Text
		$script:ChildFormEditIssue_comboboxQueueOrder_NBR_SelectedItem = $comboboxQueueOrder_NBR.SelectedItem
		$script:ChildFormEditIssue_textboxResolution_DSC = $textboxResolution_DSC.Text
		$script:ChildFormEditIssue_textboxComment_DSC = $textboxComment_DSC.Text
		$script:ChildFormEditIssue_textboxVendorTicket_NBR = $textboxVendorTicket_NBR.Text
		$script:ChildFormEditIssue_textboxInternalTicket_NBR = $textboxInternalTicket_NBR.Text
		$script:ChildFormEditIssue_comboboxCategory_CDE = $comboboxCategory_CDE.Text
		$script:ChildFormEditIssue_comboboxCategory_CDE_SelectedItem = $comboboxCategory_CDE.SelectedItem
		$script:ChildFormEditIssue_datetimepickerDue_DTE = $datetimepickerDue_DTE.Value
		$script:ChildFormEditIssue_comboboxCustomer_CDE = $comboboxCustomer_CDE.Text
		$script:ChildFormEditIssue_comboboxCustomer_CDE_SelectedItem = $comboboxCustomer_CDE.SelectedItem
		$script:ChildFormEditIssue_comboboxPriority_CDE = $comboboxPriority_CDE.Text
		$script:ChildFormEditIssue_comboboxPriority_CDE_SelectedItem = $comboboxPriority_CDE.SelectedItem
		$script:ChildFormEditIssue_comboboxLocation_CDE = $comboboxLocation_CDE.Text
		$script:ChildFormEditIssue_comboboxLocation_CDE_SelectedItem = $comboboxLocation_CDE.SelectedItem
		$script:ChildFormEditIssue_comboboxAssignee_CDE = $comboboxAssignee_CDE.Text
		$script:ChildFormEditIssue_comboboxAssignee_CDE_SelectedItem = $comboboxAssignee_CDE.SelectedItem
		$script:ChildFormEditIssue_comboboxStatus_CDE = $comboboxStatus_CDE.Text
		$script:ChildFormEditIssue_comboboxStatus_CDE_SelectedItem = $comboboxStatus_CDE.SelectedItem
		$script:ChildFormEditIssue_datetimepickerStatus_DTE = $datetimepickerStatus_DTE.Value
		$script:ChildFormEditIssue_datetimepickerCreate_DTE = $datetimepickerCreate_DTE.Value
		$script:ChildFormEditIssue_textboxLong_DSC = $textboxLong_DSC.Text
		$script:ChildFormEditIssue_textboxShort_DSC = $textboxShort_DSC.Text
		$script:ChildFormEditIssue_textboxIssue_ID = $textboxIssue_ID.Text
		$script:ChildFormEditIssue_textbox1 = $textbox1.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$comboboxWorkType_CDE.remove_Validating($comboboxWorkType_CDE_Validating)
			$comboboxCategory_CDE.remove_Validating($comboboxCategory_CDE_Validating)
			$comboboxCustomer_CDE.remove_Validating($comboboxCustomer_CDE_Validating)
			$comboboxPriority_CDE.remove_Validating($comboboxPriority_CDE_Validating)
			$comboboxLocation_CDE.remove_Validating($comboboxLocation_CDE_Validating)
			$comboboxAssignee_CDE.remove_Validating($comboboxAssignee_CDE_Validating)
			$comboboxStatus_CDE.remove_Validating($comboboxStatus_CDE_Validating)
			$textboxShort_DSC.remove_Validating($textboxShort_DSC_Validating)
			$buttonDelete.remove_Click($buttonDelete_Click)
			$buttonCancel.remove_Click($buttonCancel_Click)
			$buttonSave.remove_Click($buttonSave_Click)
			$formEditIssue.remove_Load($formEditIssue_Load)
			$formEditIssue.remove_Load($Form_StateCorrection_Load)
			$formEditIssue.remove_Closing($Form_StoreValues_Closing)
			$formEditIssue.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formEditIssue.SuspendLayout()
	#
	# formEditIssue
	#
	$formEditIssue.Controls.Add($textboxProgress_DSC)
	$formEditIssue.Controls.Add($labelIssueProgress)
	$formEditIssue.Controls.Add($textboxEstDuration_MIN)
	$formEditIssue.Controls.Add($labelEstDurationMin)
	$formEditIssue.Controls.Add($comboboxWorkType_CDE)
	$formEditIssue.Controls.Add($labelWorkType)
	$formEditIssue.Controls.Add($comboboxQueueOrder_NBR)
	$formEditIssue.Controls.Add($labelQueueOrder)
	$formEditIssue.Controls.Add($labelIndicatesARequiredEn)
	$formEditIssue.Controls.Add($textboxResolution_DSC)
	$formEditIssue.Controls.Add($labelResolution)
	$formEditIssue.Controls.Add($textboxComment_DSC)
	$formEditIssue.Controls.Add($labelComment)
	$formEditIssue.Controls.Add($textboxVendorTicket_NBR)
	$formEditIssue.Controls.Add($labelVendorTicket)
	$formEditIssue.Controls.Add($textboxInternalTicket_NBR)
	$formEditIssue.Controls.Add($labelInternalTicket)
	$formEditIssue.Controls.Add($comboboxCategory_CDE)
	$formEditIssue.Controls.Add($labelCategoryCode)
	$formEditIssue.Controls.Add($datetimepickerDue_DTE)
	$formEditIssue.Controls.Add($labelDueDate)
	$formEditIssue.Controls.Add($comboboxCustomer_CDE)
	$formEditIssue.Controls.Add($labelCustomer)
	$formEditIssue.Controls.Add($comboboxPriority_CDE)
	$formEditIssue.Controls.Add($labelPriority)
	$formEditIssue.Controls.Add($comboboxLocation_CDE)
	$formEditIssue.Controls.Add($labelLocation)
	$formEditIssue.Controls.Add($comboboxAssignee_CDE)
	$formEditIssue.Controls.Add($comboboxStatus_CDE)
	$formEditIssue.Controls.Add($datetimepickerStatus_DTE)
	$formEditIssue.Controls.Add($datetimepickerCreate_DTE)
	$formEditIssue.Controls.Add($textboxLong_DSC)
	$formEditIssue.Controls.Add($textboxShort_DSC)
	$formEditIssue.Controls.Add($textboxIssue_ID)
	$formEditIssue.Controls.Add($labelAssigneeCode)
	$formEditIssue.Controls.Add($labelStatusDate)
	$formEditIssue.Controls.Add($labelStatusCode)
	$formEditIssue.Controls.Add($labelCreateDate)
	$formEditIssue.Controls.Add($labelLongDescription)
	$formEditIssue.Controls.Add($labelShortDescription)
	$formEditIssue.Controls.Add($labelIssueID)
	$formEditIssue.Controls.Add($buttonDelete)
	$formEditIssue.Controls.Add($buttonCancel)
	$formEditIssue.Controls.Add($buttonSave)
	$formEditIssue.CancelButton = $buttonCancel
	$formEditIssue.ClientSize = '1012, 615'
	$formEditIssue.Name = 'formEditIssue'
	$formEditIssue.Text = 'Edit Issue'
	$formEditIssue.add_Load($formEditIssue_Load)
	#
	# textboxProgress_DSC
	#
	$textboxProgress_DSC.Location = '131, 376'
	$textboxProgress_DSC.Multiline = $True
	$textboxProgress_DSC.Name = 'textboxProgress_DSC'
	$textboxProgress_DSC.ScrollBars = 'Vertical'
	$textboxProgress_DSC.Size = '869, 85'
	$textboxProgress_DSC.TabIndex = 36
	#
	# labelIssueProgress
	#
	$labelIssueProgress.Location = '13, 376'
	$labelIssueProgress.Name = 'labelIssueProgress'
	$labelIssueProgress.Size = '100, 23'
	$labelIssueProgress.TabIndex = 37
	$labelIssueProgress.Text = 'Issue Progress'
	#
	# textboxEstDuration_MIN
	#
	$textboxEstDuration_MIN.Location = '131, 352'
	$textboxEstDuration_MIN.Name = 'textboxEstDuration_MIN'
	$textboxEstDuration_MIN.Size = '47, 20'
	$textboxEstDuration_MIN.TabIndex = 16
	#
	# labelEstDurationMin
	#
	$labelEstDurationMin.Location = '12, 352'
	$labelEstDurationMin.Name = 'labelEstDurationMin'
	$labelEstDurationMin.Size = '100, 23'
	$labelEstDurationMin.TabIndex = 35
	$labelEstDurationMin.Text = 'Est. Duration Min.'
	#
	# comboboxWorkType_CDE
	#
	$comboboxWorkType_CDE.FormattingEnabled = $True
	$comboboxWorkType_CDE.Location = '617, 13'
	$comboboxWorkType_CDE.Name = 'comboboxWorkType_CDE'
	$comboboxWorkType_CDE.Size = '139, 21'
	$comboboxWorkType_CDE.TabIndex = 3
	$comboboxWorkType_CDE.add_Validating($comboboxWorkType_CDE_Validating)
	#
	# labelWorkType
	#
	$labelWorkType.Location = '537, 13'
	$labelWorkType.Name = 'labelWorkType'
	$labelWorkType.Size = '68, 21'
	$labelWorkType.TabIndex = 33
	$labelWorkType.Text = '* Work Type'
	#
	# comboboxQueueOrder_NBR
	#
	$comboboxQueueOrder_NBR.FormattingEnabled = $True
	$comboboxQueueOrder_NBR.Location = '376, 179'
	$comboboxQueueOrder_NBR.Name = 'comboboxQueueOrder_NBR'
	$comboboxQueueOrder_NBR.Size = '31, 21'
	$comboboxQueueOrder_NBR.TabIndex = 9
	#
	# labelQueueOrder
	#
	$labelQueueOrder.Location = '299, 179'
	$labelQueueOrder.Name = 'labelQueueOrder'
	$labelQueueOrder.Size = '72, 23'
	$labelQueueOrder.TabIndex = 31
	$labelQueueOrder.Text = 'Queue Order'
	#
	# labelIndicatesARequiredEn
	#
	$labelIndicatesARequiredEn.Location = '14, 583'
	$labelIndicatesARequiredEn.Name = 'labelIndicatesARequiredEn'
	$labelIndicatesARequiredEn.Size = '154, 23'
	$labelIndicatesARequiredEn.TabIndex = 29
	$labelIndicatesARequiredEn.Text = '* indicates a required entry'
	#
	# textboxResolution_DSC
	#
	$textboxResolution_DSC.Location = '131, 492'
	$textboxResolution_DSC.Multiline = $True
	$textboxResolution_DSC.Name = 'textboxResolution_DSC'
	$textboxResolution_DSC.ScrollBars = 'Vertical'
	$textboxResolution_DSC.Size = '869, 85'
	$textboxResolution_DSC.TabIndex = 18
	#
	# labelResolution
	#
	$labelResolution.Location = '13, 492'
	$labelResolution.Name = 'labelResolution'
	$labelResolution.Size = '100, 23'
	$labelResolution.TabIndex = 28
	$labelResolution.Text = 'Resolution'
	#
	# textboxComment_DSC
	#
	$textboxComment_DSC.Location = '131, 466'
	$textboxComment_DSC.Name = 'textboxComment_DSC'
	$textboxComment_DSC.Size = '869, 20'
	$textboxComment_DSC.TabIndex = 17
	#
	# labelComment
	#
	$labelComment.Location = '13, 466'
	$labelComment.Name = 'labelComment'
	$labelComment.Size = '100, 23'
	$labelComment.TabIndex = 26
	$labelComment.Text = 'Comment'
	#
	# textboxVendorTicket_NBR
	#
	$textboxVendorTicket_NBR.Location = '131, 329'
	$textboxVendorTicket_NBR.MaxLength = 40
	$textboxVendorTicket_NBR.Name = 'textboxVendorTicket_NBR'
	$textboxVendorTicket_NBR.Size = '151, 20'
	$textboxVendorTicket_NBR.TabIndex = 15
	#
	# labelVendorTicket
	#
	$labelVendorTicket.Location = '13, 329'
	$labelVendorTicket.Name = 'labelVendorTicket'
	$labelVendorTicket.Size = '100, 23'
	$labelVendorTicket.TabIndex = 24
	$labelVendorTicket.Text = 'Vendor Ticket'
	#
	# textboxInternalTicket_NBR
	#
	$textboxInternalTicket_NBR.Location = '131, 306'
	$textboxInternalTicket_NBR.MaxLength = 40
	$textboxInternalTicket_NBR.Name = 'textboxInternalTicket_NBR'
	$textboxInternalTicket_NBR.Size = '151, 20'
	$textboxInternalTicket_NBR.TabIndex = 14
	#
	# labelInternalTicket
	#
	$labelInternalTicket.Location = '13, 306'
	$labelInternalTicket.Name = 'labelInternalTicket'
	$labelInternalTicket.Size = '100, 23'
	$labelInternalTicket.TabIndex = 22
	$labelInternalTicket.Text = 'Internal Ticket'
	#
	# comboboxCategory_CDE
	#
	$comboboxCategory_CDE.FormattingEnabled = $True
	$comboboxCategory_CDE.Location = '131, 281'
	$comboboxCategory_CDE.Name = 'comboboxCategory_CDE'
	$comboboxCategory_CDE.Size = '134, 21'
	$comboboxCategory_CDE.TabIndex = 13
	$comboboxCategory_CDE.add_Validating($comboboxCategory_CDE_Validating)
	#
	# labelCategoryCode
	#
	$labelCategoryCode.Location = '13, 281'
	$labelCategoryCode.Name = 'labelCategoryCode'
	$labelCategoryCode.Size = '100, 23'
	$labelCategoryCode.TabIndex = 20
	$labelCategoryCode.Text = '* Category Code'
	#
	# datetimepickerDue_DTE
	#
	$datetimepickerDue_DTE.Format = 'Custom'
	$datetimepickerDue_DTE.Location = '131, 256'
	$datetimepickerDue_DTE.Name = 'datetimepickerDue_DTE'
	$datetimepickerDue_DTE.ShowCheckBox = $True
	$datetimepickerDue_DTE.Size = '162, 20'
	$datetimepickerDue_DTE.TabIndex = 12
	#
	# labelDueDate
	#
	$labelDueDate.Location = '13, 256'
	$labelDueDate.Name = 'labelDueDate'
	$labelDueDate.Size = '100, 23'
	$labelDueDate.TabIndex = 18
	$labelDueDate.Text = 'Due Date'
	#
	# comboboxCustomer_CDE
	#
	$comboboxCustomer_CDE.FormattingEnabled = $True
	$comboboxCustomer_CDE.Location = '854, 13'
	$comboboxCustomer_CDE.Name = 'comboboxCustomer_CDE'
	$comboboxCustomer_CDE.Size = '146, 21'
	$comboboxCustomer_CDE.TabIndex = 4
	$comboboxCustomer_CDE.add_Validating($comboboxCustomer_CDE_Validating)
	#
	# labelCustomer
	#
	$labelCustomer.Location = '781, 13'
	$labelCustomer.Name = 'labelCustomer'
	$labelCustomer.Size = '65, 21'
	$labelCustomer.TabIndex = 15
	$labelCustomer.Text = '* Customer'
	#
	# comboboxPriority_CDE
	#
	$comboboxPriority_CDE.FormattingEnabled = $True
	$comboboxPriority_CDE.Location = '470, 13'
	$comboboxPriority_CDE.Name = 'comboboxPriority_CDE'
	$comboboxPriority_CDE.Size = '60, 21'
	$comboboxPriority_CDE.TabIndex = 2
	$comboboxPriority_CDE.add_Validating($comboboxPriority_CDE_Validating)
	#
	# labelPriority
	#
	$labelPriority.Location = '409, 13'
	$labelPriority.Name = 'labelPriority'
	$labelPriority.Size = '54, 21'
	$labelPriority.TabIndex = 13
	$labelPriority.Text = '* Priority'
	#
	# comboboxLocation_CDE
	#
	$comboboxLocation_CDE.FormattingEnabled = $True
	$comboboxLocation_CDE.Location = '317, 13'
	$comboboxLocation_CDE.Name = 'comboboxLocation_CDE'
	$comboboxLocation_CDE.Size = '81, 21'
	$comboboxLocation_CDE.TabIndex = 1
	$comboboxLocation_CDE.add_Validating($comboboxLocation_CDE_Validating)
	#
	# labelLocation
	#
	$labelLocation.Location = '249, 13'
	$labelLocation.Name = 'labelLocation'
	$labelLocation.Size = '63, 20'
	$labelLocation.TabIndex = 11
	$labelLocation.Text = '* Location'
	#
	# comboboxAssignee_CDE
	#
	$comboboxAssignee_CDE.FormattingEnabled = $True
	$comboboxAssignee_CDE.Location = '131, 230'
	$comboboxAssignee_CDE.Name = 'comboboxAssignee_CDE'
	$comboboxAssignee_CDE.Size = '134, 21'
	$comboboxAssignee_CDE.TabIndex = 11
	$comboboxAssignee_CDE.add_Validating($comboboxAssignee_CDE_Validating)
	#
	# comboboxStatus_CDE
	#
	$comboboxStatus_CDE.FormattingEnabled = $True
	$comboboxStatus_CDE.Location = '131, 179'
	$comboboxStatus_CDE.Name = 'comboboxStatus_CDE'
	$comboboxStatus_CDE.Size = '134, 21'
	$comboboxStatus_CDE.TabIndex = 8
	$comboboxStatus_CDE.add_Validating($comboboxStatus_CDE_Validating)
	#
	# datetimepickerStatus_DTE
	#
	$datetimepickerStatus_DTE.Enabled = $False
	$datetimepickerStatus_DTE.Format = 'Custom'
	$datetimepickerStatus_DTE.Location = '131, 205'
	$datetimepickerStatus_DTE.Name = 'datetimepickerStatus_DTE'
	$datetimepickerStatus_DTE.Size = '162, 20'
	$datetimepickerStatus_DTE.TabIndex = 10
	#
	# datetimepickerCreate_DTE
	#
	$datetimepickerCreate_DTE.Enabled = $False
	$datetimepickerCreate_DTE.Format = 'Custom'
	$datetimepickerCreate_DTE.Location = '131, 154'
	$datetimepickerCreate_DTE.Name = 'datetimepickerCreate_DTE'
	$datetimepickerCreate_DTE.Size = '162, 20'
	$datetimepickerCreate_DTE.TabIndex = 7
	#
	# textboxLong_DSC
	#
	$textboxLong_DSC.Location = '131, 64'
	$textboxLong_DSC.Multiline = $True
	$textboxLong_DSC.Name = 'textboxLong_DSC'
	$textboxLong_DSC.ScrollBars = 'Vertical'
	$textboxLong_DSC.Size = '869, 85'
	$textboxLong_DSC.TabIndex = 6
	#
	# textboxShort_DSC
	#
	$textboxShort_DSC.Location = '131, 40'
	$textboxShort_DSC.MaxLength = 100
	$textboxShort_DSC.Name = 'textboxShort_DSC'
	$textboxShort_DSC.Size = '869, 20'
	$textboxShort_DSC.TabIndex = 5
	$textboxShort_DSC.add_Validating($textboxShort_DSC_Validating)
	#
	# textboxIssue_ID
	#
	$textboxIssue_ID.Location = '131, 13'
	$textboxIssue_ID.Name = 'textboxIssue_ID'
	$textboxIssue_ID.ReadOnly = $True
	$textboxIssue_ID.Size = '100, 20'
	$textboxIssue_ID.TabIndex = 0
	$textboxIssue_ID.TabStop = $False
	#
	# labelAssigneeCode
	#
	$labelAssigneeCode.Location = '13, 230'
	$labelAssigneeCode.Name = 'labelAssigneeCode'
	$labelAssigneeCode.Size = '100, 23'
	$labelAssigneeCode.TabIndex = 9
	$labelAssigneeCode.Text = 'Assignee Code'
	#
	# labelStatusDate
	#
	$labelStatusDate.Location = '13, 205'
	$labelStatusDate.Name = 'labelStatusDate'
	$labelStatusDate.Size = '100, 23'
	$labelStatusDate.TabIndex = 8
	$labelStatusDate.Text = 'Status Date'
	#
	# labelStatusCode
	#
	$labelStatusCode.Location = '13, 179'
	$labelStatusCode.Name = 'labelStatusCode'
	$labelStatusCode.Size = '100, 23'
	$labelStatusCode.TabIndex = 7
	$labelStatusCode.Text = '* Status Code'
	#
	# labelCreateDate
	#
	$labelCreateDate.Location = '13, 154'
	$labelCreateDate.Name = 'labelCreateDate'
	$labelCreateDate.Size = '100, 23'
	$labelCreateDate.TabIndex = 6
	$labelCreateDate.Text = 'Create Date'
	#
	# labelLongDescription
	#
	$labelLongDescription.Location = '13, 64'
	$labelLongDescription.Name = 'labelLongDescription'
	$labelLongDescription.Size = '100, 23'
	$labelLongDescription.TabIndex = 5
	$labelLongDescription.Text = 'Long Description'
	#
	# labelShortDescription
	#
	$labelShortDescription.Location = '13, 40'
	$labelShortDescription.Name = 'labelShortDescription'
	$labelShortDescription.Size = '100, 23'
	$labelShortDescription.TabIndex = 4
	$labelShortDescription.Text = '* Short Description'
	#
	# labelIssueID
	#
	$labelIssueID.Location = '13, 13'
	$labelIssueID.Name = 'labelIssueID'
	$labelIssueID.Size = '100, 23'
	$labelIssueID.TabIndex = 3
	$labelIssueID.Text = 'Issue ID'
	#
	# buttonDelete
	#
	$buttonDelete.Location = '764, 583'
	$buttonDelete.Name = 'buttonDelete'
	$buttonDelete.Size = '75, 23'
	$buttonDelete.TabIndex = 19
	$buttonDelete.Text = 'Delete'
	$buttonDelete.UseVisualStyleBackColor = $True
	$buttonDelete.add_Click($buttonDelete_Click)
	#
	# buttonCancel
	#
	$buttonCancel.DialogResult = 'Cancel'
	$buttonCancel.Location = '845, 583'
	$buttonCancel.Name = 'buttonCancel'
	$buttonCancel.Size = '75, 23'
	$buttonCancel.TabIndex = 20
	$buttonCancel.Text = 'Cancel'
	$buttonCancel.UseVisualStyleBackColor = $True
	$buttonCancel.add_Click($buttonCancel_Click)
	#
	# buttonSave
	#
	$buttonSave.Location = '926, 583'
	$buttonSave.Name = 'buttonSave'
	$buttonSave.Size = '75, 23'
	$buttonSave.TabIndex = 21
	$buttonSave.Text = 'Save'
	$buttonSave.UseVisualStyleBackColor = $True
	$buttonSave.add_Click($buttonSave_Click)
	#
	# errorprovider1
	#
	$errorprovider1.ContainerControl = $formEditIssue
	#
	# textbox1
	#
	$textbox1.Location = '131, 534'
	$textbox1.Multiline = $True
	$textbox1.Name = 'textbox1'
	$textbox1.ScrollBars = 'Vertical'
	$textbox1.Size = '869, 93'
	$textbox1.TabIndex = 36
	#
	# label1
	#
	$label1.Location = '13, 534'
	$label1.Name = 'label1'
	$label1.Size = '100, 23'
	$label1.TabIndex = 37
	$label1.Text = 'Resolution'
	$formEditIssue.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formEditIssue.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formEditIssue.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formEditIssue.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formEditIssue.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formEditIssue.ShowDialog()

}
#endregion Source: ChildFormEditIssue.psf

#region Source: ChildFormSearchForImplementation.psf
function Call-ChildFormSearchForImplementation_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
khMAAB+LCAAAAAAABADVWF1v2jAUfZ+0/2DlYU+ofARK0SBSC+02jbYbsG57Qk5yA14dGzlOgf36
3WDYoIGStAVpQkJJuB/H9xzf69DsgScfQM07VFOCFxGTomVVLOftG0Kat4qNmKD8inG4oSE47THj
/pVUYR+o8sZ49SmccAhBaKrR9WQSBc1iys0Ec3+Bp4meT6Bl9eeRhvDkOxO+nEYnSUjzXSDbfiqQ
uyW26kkp+RRIO+Y6VtASEGtFeYF8iV3OvM8wH8h7EC23Xqc1r3ZabthVKJ01LCIQSssKMN41ZcIi
XrIYhaZWWwqtJI/MshHrFyUnoPR86dOmwgN+EWstxcoGrXoQAPp7sDRzFwaXM6YtUlyFKq5i7YrN
GVavz36D5TRq1QKxTyt7nZKqWs5qKXvNBzDTlvNt4lMNZJMx8jWGGMit8kGl41w+oN0ySFdS/1/O
YXLbLC4MVtb7GU6AXMjZwUnWmMeVs5s4dEHdBj3MMfw6+PkU5+mqnQtvLJXlXEikFYXZhUCnSpR2
60pvUVnLKZcbSKedpnMXoTtgZ/DvAfVvBZ9bzkDFkMHBCK5cwiJXShnsB9T9JHyYoUjTMika5rPr
oEtd4AdXAU+yrBfz2PxX8tGfwpuTRzsXj2dZrBeNw0AiMiBbQeWn/8htwAyr55E/kBPDfIH02Gic
UwB2gZRrebe/gZuZ+7NqPfce3mq93uyxtB05FY8wDZePH/X93PybSXpw+s08fjH7+Xk/Oz1F4rNs
R0P8OtDMvNdrubd8OfOWf0fDyfvMgL5FcMeimPK+nnO4oN59W/JF/XYMo3Wp4QHIu9+swXDx7KUq
S860HxTz7xhMD641PFrRESZ7wGQ9iDBK3mnDuZxiIdVAnvv+Ylo5V5RHWYb5mm8HOGjI6b6u9vVp
96yeh0Ovmn3mbalb5h3QsJOpV08fSJ7aA1uhbehR8jgUH/FABepaxhEsBboF6XC77aZwH4ePFSpC
t4HzDkMQfTyHQ3tMxQj8HUme8PivOrF5M3rJESyrHDuMcjkyBbQc8/qWs4PjULUr9ZwtPFnhIRt4
NXMDv1x08GxwXq99J+vf27w3b86jCEIUEUQr2+WTuRNGnlScua8gxGbxb9THWYz0j5Hj1bfX/ozJ
DDxOIkWnTIyek6tkB7WgHpTLfq1Ebbo/14+QH2VNbang9RP9vTWSbxbX/4Nz/gBm1uQGkhMAAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formMain = New-Object 'System.Windows.Forms.Form'
	$textboxNumberOfRows_QTY = New-Object 'System.Windows.Forms.TextBox'
	$labelNumberOfRows = New-Object 'System.Windows.Forms.Label'
	$textboxSearch = New-Object 'System.Windows.Forms.TextBox'
	$buttonSearch = New-Object 'System.Windows.Forms.Button'
	$datagridviewResults = New-Object 'System.Windows.Forms.DataGridView'
	$buttonExit = New-Object 'System.Windows.Forms.Button'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	
	#region Control Helper Functions
	function Load-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The ComboBox control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the ComboBox's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory=$true)]
			$Item,
		    [Parameter(Mandatory=$false)]
			[string]$DataMember
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.ComponentModel.IListSource]`
		-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView] )
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{	
				$array.Add($Item)	
			}
			$DataGridView.DataSource = $array
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param(
		[ValidateNotNull()]
		$InputObject, 
		[ValidateNotNull()]
		[System.Data.DataTable]$Table,
		[switch]$RetainColumns,
		[switch]$FilterWMIProperties)
		
		if($Table -eq $null)
		{
			$Table = New-Object System.Data.DataTable
		}
	
		if($InputObject-is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		else
		{
			if(-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
	
				if($InputObject -eq $null){ return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach($item in $InputObject)
				{
					if($item -ne $null)
					{
						$object = $item
						break	
					}
				}
	
				if($object -eq $null) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if(-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__'))#filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if($prop.Value -ne $null)
						{
							try{ $type = $prop.Value.GetType() } catch {}
						}
	
						if($type -ne $null) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
			      			[void]$table.Columns.Add($prop.Name, $type) 
						}
						else #Type info not found
						{ 
							[void]$table.Columns.Add($prop.Name) 	
						}
					}
			    }
				
				if($object -is [System.Data.DataRow])
				{
					foreach($item in $InputObject)
					{	
						$Table.Rows.Add($item)
					}
					return  @(,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()	
			}
			
			foreach($item in $InputObject)
			{		
				$row = $table.NewRow()
				
				if($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
	
		return @(,$Table)	
	}
	#endregion
	
	#region Search Function
	function SearchGrid()
	{
		$RowIndex = 0
		$ColumnIndex = 0
		$seachString = $textboxSearch.Text
		
		if($seachString -eq "")
		{
			return
		}
		
		if($datagridviewResults.SelectedCells.Count -ne 0)
		{
			$startCell = $datagridviewResults.SelectedCells[0];
			$RowIndex = $startCell.RowIndex
			$ColumnIndex = $startCell.ColumnIndex + 1
		}
		
		$columnCount = $datagridviewResults.ColumnCount
		$rowCount = $datagridviewResults.RowCount
		for(;$RowIndex -lt $rowCount; $RowIndex++)
		{
			$Row = $datagridviewResults.Rows[$RowIndex]
			
			for(;$ColumnIndex -lt $columnCount; $ColumnIndex++)
			{
				$cell = $Row.Cells[$ColumnIndex]
				
				if($cell.Value -ne $null -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
				{
					$datagridviewResults.CurrentCell = $cell
					return
				}
			}
			
			$ColumnIndex = 0
		}
		
		$datagridviewResults.CurrentCell = $null
		[void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.","String not Found")
		
	}
	#endregion
	
	$formMain_Load={
		#TODO: Initialize Form Controls here
		
		<###############################################################
		#
		# Display non-Production environment notification
		#
		###############################################################>
	
		display_nonproduction_environment
	
		if ($Debug_SW -eq 1)
		{
			Write-Host "`$User_SW          = $User_SW"
		}
	
		[string]$SQLCommand_STR = "
select
	assignee_cde,
	issue_id,
	status_cde,
	queue_order_nbr,
	status_dte,
	location_cde,
	customer_cde,
	short_dsc,
	substring(long_dsc, 1, 150) as long_dsc,
	create_dte,
	due_dte,
	internal_ticket_nbr,
	vendor_ticket_nbr,
	comment_dsc
from
	issue
where
	('ALL' = '$User_SW' or assignee_cde = (select assignee_cde from assignee where user_nme = '$CurrentUser_NME'))
	and status_cde = 'Implementation'
order by
	assignee_cde,
	case
		when queue_order_nbr is null then 99
		else                              queue_order_nbr
	end,
	status_cde desc,
	due_dte
	;" # End of $SQLCommand_STR
		
		if ($Debug_SW -eq 1)
		{
			Write-Host $SQLCommand_STR
		}
		
		$Instance = "$DatabaseConnection_STR"
		$Database = "$Database_NME"
		$connStr  = "Server=$Instance;Database=$Database;Integrated Security=True"
		
		# Ideas for adding DataGridViewComboBoxColumn to DataGridView:
		#     http://www.devx.com/dotnet/Article/33748/0/page/2
		#     http://www.devx.com/dotnet/Article/33748/0/page/3
		
		$conn            = New-Object System.Data.SqlClient.SQLConnection($connStr)
		$cmd             = $conn.CreateCommand()
		$cmd.CommandText = $SQLCommand_STR
		$script:adapter  = New-Object System.Data.SqlClient.SqlDataAdapter($cmd)
		$dt              = New-Object System.Data.DataTable
		$script:adapter.Fill($dt)
		$datagridviewResults.DataSource = $dt
		$cmdBldr         = New-Object System.Data.SqlClient.SqlCommandBuilder($adapter)
		
	#	# Retrieve data from database
	#	
	#	$dt = Get-Datatable $DatabaseConnection_STR $Database_NME $SQLCommand_STR
	#	
	#	# Put data into datagridview
	#	
	#	$datagridviewResults.DataSource = $dt.Tables[0]
	#	
		# Set datagridview column attributes
		
		$datagridviewResults.Columns[0].HeaderText = "Assignee";
		$datagridviewResults.Columns[0].Width = 80;
		
		$datagridviewResults.Columns[1].HeaderText = "ID";
		$datagridviewResults.Columns[1].Width = 40;
		
		$datagridviewResults.Columns[2].HeaderText = "Status Code";
		$datagridviewResults.Columns[2].Width = 80;
		
		$datagridviewResults.Columns[3].HeaderText = "Order";
		$datagridviewResults.Columns[3].Width = 35;
		
		$datagridviewResults.Columns[4].HeaderText = "Status Date";
		$datagridviewResults.Columns[4].Width = 110;
		
		$datagridviewResults.Columns[5].HeaderText = "Location";
		$datagridviewResults.Columns[5].Width = 60;
		
		$datagridviewResults.Columns[6].HeaderText = "Customer";
		$datagridviewResults.Columns[6].Width = 90;
		
		$datagridviewResults.Columns[7].HeaderText = "Short Description";
		$datagridviewResults.Columns[7].Width = 120;
		
		$datagridviewResults.Columns[8].HeaderText = "Long Description";
		$datagridviewResults.Columns[8].Width = 120;
		
		$datagridviewResults.Columns[9].HeaderText = "Create Date";
		$datagridviewResults.Columns[9].Width = 110;
		
		$datagridviewResults.Columns[10].HeaderText = "Due Date";
		$datagridviewResults.Columns[10].Width = 110;
		
		$datagridviewResults.Columns[11].HeaderText = "Int. Ticket";
		$datagridviewResults.Columns[11].Width = 75;
		
		$datagridviewResults.Columns[12].HeaderText = "Vendor Ticket";
		$datagridviewResults.Columns[12].Width = 80;
		
		$datagridviewResults.Columns[13].HeaderText = "Comment";
		$datagridviewResults.Columns[13].Width = 120;
		
		# Display the row count
		
		$DataGridRowCount_QTY = $datagridviewResults.RowCount
		
		$textboxNumberOfRows_QTY.Text = "{0:N0}" -f $DataGridRowCount_QTY
	}
	
	$buttonSearch_Click={
		#TODO: Place custom script here
		SearchGrid
	}
	
	$buttonExit_Click={
		#TODO: Place custom script here
	
		if ($script:DGVhasChanged -and [System.Windows.Forms.MessageBox]::Show('Do you wish to save?', 'Data Changed', 'YesNo'))
		{
			try
			{
				$script:adapter.Update($datagridviewResults.DataSource)
			}
			catch
			{
				$ErrorMessage_STR = $error[0].ToString();
	#			$ErrorPosition_STR = $error[0].InvocationInfo.PositionMessage.ToString();
				
				[System.Windows.Forms.MessageBox]::Show("$ErrorMessage_STR", "Database Write Was Unsuccessful", "OK")
				
				return
			}
		}
		
		$formMain.Close()
	}
	
	$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
		if($datagridviewResults.DataSource -is [System.Data.DataTable])
		{
			$column = $datagridviewResults.Columns[$_.ColumnIndex]
			$direction = [System.ComponentModel.ListSortDirection]::Ascending
			
			if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
			{
				$direction = [System.ComponentModel.ListSortDirection]::Descending
			}
	
			$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
		}
	}
	
	$textboxSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
		if($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
		{
			SearchGrid	
			$_.SuppressKeyPress = $true
		}
	}
	
	$datagridviewResults_CurrentCellDirtyStateChanged={
		#TODO: Place custom script here
		$script:DGVhasChanged = $true
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formMain.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ChildFormSearchForImplementation_textboxNumberOfRows_QTY = $textboxNumberOfRows_QTY.Text
		$script:ChildFormSearchForImplementation_textboxSearch = $textboxSearch.Text
		$script:ChildFormSearchForImplementation_datagridviewResults = $datagridviewResults.SelectedCells
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$textboxSearch.remove_KeyDown($textboxSearch_KeyDown)
			$buttonSearch.remove_Click($buttonSearch_Click)
			$datagridviewResults.remove_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
			$datagridviewResults.remove_CurrentCellDirtyStateChanged($datagridviewResults_CurrentCellDirtyStateChanged)
			$buttonExit.remove_Click($buttonExit_Click)
			$formMain.remove_Load($formMain_Load)
			$formMain.remove_Load($Form_StateCorrection_Load)
			$formMain.remove_Closing($Form_StoreValues_Closing)
			$formMain.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formMain.SuspendLayout()
	#
	# formMain
	#
	$formMain.Controls.Add($textboxNumberOfRows_QTY)
	$formMain.Controls.Add($labelNumberOfRows)
	$formMain.Controls.Add($textboxSearch)
	$formMain.Controls.Add($buttonSearch)
	$formMain.Controls.Add($datagridviewResults)
	$formMain.Controls.Add($buttonExit)
	$formMain.CancelButton = $buttonExit
	$formMain.ClientSize = '954, 362'
	$formMain.Name = 'formMain'
	$formMain.Text = 'Update Implementation Queue Order'
	$formMain.add_Load($formMain_Load)
	#
	# textboxNumberOfRows_QTY
	#
	$textboxNumberOfRows_QTY.Anchor = 'Bottom, Left'
	$textboxNumberOfRows_QTY.Location = '119, 332'
	$textboxNumberOfRows_QTY.Name = 'textboxNumberOfRows_QTY'
	$textboxNumberOfRows_QTY.ReadOnly = $True
	$textboxNumberOfRows_QTY.Size = '100, 20'
	$textboxNumberOfRows_QTY.TabIndex = 9
	#
	# labelNumberOfRows
	#
	$labelNumberOfRows.Anchor = 'Bottom, Left'
	$labelNumberOfRows.Location = '12, 332'
	$labelNumberOfRows.Name = 'labelNumberOfRows'
	$labelNumberOfRows.Size = '100, 23'
	$labelNumberOfRows.TabIndex = 8
	$labelNumberOfRows.Text = 'Number of Rows'
	#
	# textboxSearch
	#
	$textboxSearch.Anchor = 'Top, Left, Right'
	$textboxSearch.Location = '13, 15'
	$textboxSearch.Name = 'textboxSearch'
	$textboxSearch.Size = '847, 20'
	$textboxSearch.TabIndex = 0
	$textboxSearch.add_KeyDown($textboxSearch_KeyDown)
	#
	# buttonSearch
	#
	$buttonSearch.Anchor = 'Top, Right'
	$buttonSearch.Location = '866, 13'
	$buttonSearch.Name = 'buttonSearch'
	$buttonSearch.Size = '75, 23'
	$buttonSearch.TabIndex = 1
	$buttonSearch.Text = '&Search'
	$buttonSearch.UseVisualStyleBackColor = $True
	$buttonSearch.add_Click($buttonSearch_Click)
	#
	# datagridviewResults
	#
	$datagridviewResults.AllowUserToAddRows = $False
	$datagridviewResults.AllowUserToDeleteRows = $False
	$datagridviewResults.Anchor = 'Top, Bottom, Left, Right'
	$datagridviewResults.Location = '12, 42'
	$datagridviewResults.Name = 'datagridviewResults'
	$datagridviewResults.Size = '930, 279'
	$datagridviewResults.TabIndex = 2
	$datagridviewResults.add_ColumnHeaderMouseClick($datagridviewResults_ColumnHeaderMouseClick)
	$datagridviewResults.add_CurrentCellDirtyStateChanged($datagridviewResults_CurrentCellDirtyStateChanged)
	#
	# buttonExit
	#
	$buttonExit.Anchor = 'Bottom, Right'
	$buttonExit.DialogResult = 'Cancel'
	$buttonExit.Location = '867, 327'
	$buttonExit.Name = 'buttonExit'
	$buttonExit.Size = '75, 23'
	$buttonExit.TabIndex = 4
	$buttonExit.Text = 'E&xit'
	$buttonExit.UseVisualStyleBackColor = $True
	$buttonExit.add_Click($buttonExit_Click)
	$formMain.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formMain.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formMain.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formMain.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formMain.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formMain.ShowDialog()

}
#endregion Source: ChildFormSearchForImplementation.psf

#Start the application
Main ($CommandLine)
